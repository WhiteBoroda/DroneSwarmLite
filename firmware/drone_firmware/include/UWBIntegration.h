//=============================================================================
// firmware/drone_firmware/include/UWBIntegration.h
// Header file –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó UWB –∑ —ñ–Ω—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
//=============================================================================

#ifndef UWB_INTEGRATION_H
#define UWB_INTEGRATION_H

#include <Arduino.h>
#include <vector>
#include "AerialUWBManager_ESP32.h"

// Forward declarations
class LoRaModule;
class FlightControl;
class DroneController;

//=============================================================================
// ‚úÖ –°–¢–†–£–ö–¢–£–†–ò –î–ê–ù–ò–•
//=============================================================================

// LoRa –ø–∞–∫–µ—Ç –ø–æ–∑–∏—Ü—ñ—ó
struct __attribute__((packed)) LoRaPositionPacket {
    uint8_t packet_type;        // 0x01 = Position Update
    uint16_t sender_id;
    uint32_t timestamp_ms;
    float position_x;
    float position_y;
    float position_z;
    float velocity_x;
    float velocity_y;
    float velocity_z;
    float accuracy;
    uint8_t mode;               // AerialMode
    uint16_t crc;
};

// –ü–æ–∑–∏—Ü—ñ—è –¥–ª—è flight controller
struct FlightPosition {
    float x_meters;
    float y_meters;
    float altitude_meters;
    float velocity_x;
    float velocity_y;
    float velocity_z;
    float accuracy_meters;
    uint64_t timestamp_us;
};

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ü—ñ—ó
struct FormationPosition {
    float offset_x;  // –í—ñ–¥–Ω–æ—Å–Ω–æ –ª—ñ–¥–µ—Ä–∞
    float offset_y;
    float offset_z;
    float spacing;   // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥—Ä–æ–Ω–∞–º–∏
};

// –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–≥—Ä–æ–∑—É –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
struct CollisionThreat {
    uint16_t drone_id;
    float distance;
    float time_to_collision;  // —Å–µ–∫—É–Ω–¥–∏
    AerialUWB_ESP32::Position3D_ESP32 relative_velocity;
    bool critical;            // < 5 –º–µ—Ç—Ä—ñ–≤
};

//=============================================================================
// ‚úÖ LORA –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø
//=============================================================================

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é —á–µ—Ä–µ–∑ LoRa
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 * @param lora –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ LoRa –º–æ–¥—É–ª—å
 * @return true —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
 */
bool sendPositionViaLoRa (AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager,LoRaModule* lora);

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é —á–µ—Ä–µ–∑ LoRa
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 * @param lora –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ LoRa –º–æ–¥—É–ª—å
 * @param packet –ü–∞–∫–µ—Ç –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
 * @return true —è–∫—â–æ –ø–∞–∫–µ—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ
 */
bool receivePositionViaLoRa(AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager, LoRaModule* lora,
                            LoRaPositionPacket& packet);

//=============================================================================
// ‚úÖ FLIGHT CONTROLLER –Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø
//=============================================================================

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –¥–æ flight controller
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 * @param flight_control –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ flight control
 * @return true —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
 */
bool sendPositionToFlightController(AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager,
                                    FlightControl* flight_control);

/**
 * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é —Ü—ñ–ª—å–æ–≤–æ–≥–æ –¥—Ä–æ–Ω–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 * @param target_drone_id ID —Ü—ñ–ª—å–æ–≤–æ–≥–æ –¥—Ä–æ–Ω–∞
 * @param target_position –†–µ–∑—É–ª—å—Ç—É—é—á–∞ –ø–æ–∑–∏—Ü—ñ—è
 * @return true —è–∫—â–æ –ø–æ–∑–∏—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞
 */
bool getTargetPositionForNavigation(AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager,
                                    uint16_t target_drone_id,
                                    AerialUWB_ESP32::Position3D_ESP32& target_position);

//=============================================================================
// ‚úÖ –§–û–†–ú–ê–¶–Ü–ô–ù–ò–ô –ü–û–õ–Ü–¢
//=============================================================================

/**
 * –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –≤ —Ñ–æ—Ä–º–∞—Ü—ñ—ó
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 * @param formation_config –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ü—ñ—ó
 * @param target_position –†–µ–∑—É–ª—å—Ç—É—é—á–∞ —Ü—ñ–ª—å–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
 * @return true —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ
 */
bool calculateFormationPosition(AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager,
                                FormationPosition formation_config,
                                AerialUWB_ESP32::Position3D_ESP32& target_position);

/**
 * –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ü—ñ—ó
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 * @param min_spacing –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
 * @param corrected_position –°–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è
 * @return true —è–∫—â–æ —î —Ä–∏–∑–∏–∫ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
 */
bool maintainFormationSpacing(AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager,
                              float min_spacing,
                              AerialUWB_ESP32::Position3D_ESP32& corrected_position);

//=============================================================================
// ‚úÖ COLLISION AVOIDANCE
//=============================================================================

/**
 * –í–∏—è–≤–∏—Ç–∏ –∑–∞–≥—Ä–æ–∑–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 * @param threats –í–µ–∫—Ç–æ—Ä –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–≥—Ä–æ–∑–∞–º–∏
 * @param warning_distance –í—ñ–¥—Å—Ç–∞–Ω—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (–º)
 * @param critical_distance –ö—Ä–∏—Ç–∏—á–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (–º)
 * @return true —è–∫—â–æ —î –∑–∞–≥—Ä–æ–∑–∏
 */
bool detectCollisionThreats(AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager,
                            std::vector<CollisionThreat>& threats,
                            float warning_distance = 20.0f,
                            float critical_distance = 5.0f);

/**
 * –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–µ–∫—Ç–æ—Ä —É–Ω–∏–∫–Ω–µ–Ω–Ω—è
 * @param threats –í–µ–∫—Ç–æ—Ä –∑–∞–≥—Ä–æ–∑
 * @param current_velocity –ü–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
 * @return –í–µ–∫—Ç–æ—Ä —à–≤–∏–¥–∫–æ—Å—Ç—ñ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è
 */
AerialUWB_ESP32::Position3D_ESP32 calculateAvoidanceVector(
        const std::vector<CollisionThreat>& threats,
        AerialUWB_ESP32::Position3D_ESP32 current_velocity);

//=============================================================================
// ‚úÖ UTILITY FUNCTIONS
//=============================================================================

/**
 * –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ 3D –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏
 * @param p1 –ü–µ—Ä—à–∞ —Ç–æ—á–∫–∞
 * @param p2 –î—Ä—É–≥–∞ —Ç–æ—á–∫–∞
 * @return –í—ñ–¥—Å—Ç–∞–Ω—å –≤ –º–µ—Ç—Ä–∞—Ö
 */
float calculateDistance3D(const AerialUWB_ESP32::Position3D_ESP32& p1,
                          const AerialUWB_ESP32::Position3D_ESP32& p2);

/**
 * –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ CRC16 checksum
 * @param data –î–∞–Ω—ñ
 * @param length –î–æ–≤–∂–∏–Ω–∞ –¥–∞–Ω–∏—Ö
 * @return CRC16 checksum
 */
uint16_t calculateCRC16(const uint8_t* data, uint16_t length);

//=============================================================================
// ‚úÖ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê
//=============================================================================

/**
 * –í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ä–º–∞—Ü—ñ—ó
 * @param uwb_manager –í–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ UWB –º–µ–Ω–µ–¥–∂–µ—Ä
 */
void printFormationStatus(AerialUWB_ESP32::AerialUWBManager_ESP32* uwb_manager);

/**
 * –í–∏–≤–µ—Å—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
 * @param threats –í–µ–∫—Ç–æ—Ä –∑–∞–≥—Ä–æ–∑
 */
void printCollisionWarnings(const std::vector<CollisionThreat>& threats);

//=============================================================================
// ‚úÖ –ú–ê–ö–†–û–°–ò –î–õ–Ø –ó–†–£–ß–ù–û–°–¢–Ü
//=============================================================================

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∫–º/–≥–æ–¥ –≤ –º/—Å
#define KMH_TO_MS(kmh) ((kmh) / 3.6f)

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –º/—Å –≤ –∫–º/–≥–æ–¥
#define MS_TO_KMH(ms) ((ms) * 3.6f)

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó
#define IS_POSITION_VALID(pos) \
    ((pos).accuracy_meters > 0.0f && (pos).accuracy_meters < 100.0f)

// –í—ñ–¥—Å—Ç–∞–Ω—å –≤ –º–µ–∂–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ
#define IS_DISTANCE_SAFE(distance, min_safe) ((distance) >= (min_safe))

#endif // UWB_INTEGRATION_H

//=============================================================================
// üá∫üá¶ Slava Ukraini! Death to russian invaders! üá∫üá¶
//=============================================================================