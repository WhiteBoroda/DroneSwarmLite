//=============================================================================
// firmware/drone_firmware/include/SwarmPairing.h
// ü§ù Swarm Auto-Discovery and Pairing System
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—é –¥—Ä–æ–Ω—ñ–≤
//=============================================================================

#ifndef SWARM_PAIRING_H
#define SWARM_PAIRING_H

#include <Arduino.h>
#include <vector>
#include <algorithm>
#include "HardwareConfig.h"
#include "PairingCrypto.h"

//=============================================================================
// ‚úÖ –ö–û–ù–°–¢–ê–ù–¢–ò PAIRING –ü–†–û–¢–û–ö–û–õ–£
//=============================================================================

namespace PairingConfig {
    // –ß–∞—Å—Ç–æ—Ç–∏ –¥–ª—è discovery (–æ–∫—Ä–µ–º–∞ –≤—ñ–¥ —Ä–æ–±–æ—á–æ—ó)
    constexpr uint32_t DISCOVERY_FREQUENCY = 868500000;  // 868.5 MHz

    // –¢–∞–π–º—ñ–Ω–≥–∏ discovery
    constexpr uint32_t DISCOVERY_DURATION_MS = 15000;    // 15 —Å–µ–∫—É–Ω–¥ –ø–æ—à—É–∫
    constexpr uint32_t BEACON_INTERVAL_MS = 500;         // Beacon –∫–æ–∂–Ω—ñ 500ms
    constexpr uint32_t ID_ASSIGNMENT_TIMEOUT_MS = 30000; // 30 —Å–µ–∫ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
    constexpr uint32_t CONFIRMATION_TIMEOUT_MS = 3000;   // 3 —Å–µ–∫ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

    // Retry –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    constexpr uint8_t MAX_RETRIES = 3;
    constexpr uint32_t RETRY_DELAY_MS = 100;

    // –î—ñ–∞–ø–∞–∑–æ–Ω ID –¥–ª—è —Ä–æ—é
    constexpr uint16_t SWARM_ID_START = 101;
    constexpr uint16_t SWARM_ID_END = 199;

    // LED –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ü—ñ—ó
    constexpr int LED_DISCOVERY_PIN = LED_COMMUNICATION;
}

//=============================================================================
// ‚úÖ –¢–ò–ü–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ DISCOVERY –ü–†–û–¢–û–ö–û–õ–£
//=============================================================================

enum class DiscoveryMessageType : uint8_t {
    BEACON = 0xD1,              // Discovery beacon
    ID_ASSIGNMENT = 0xD2,       // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è ID
    PAIRING_COMPLETE = 0xD3,    // Pairing –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
    ID_CONFIRMATION = 0xD4      // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
};

//=============================================================================
// ‚úÖ –°–¢–†–£–ö–¢–£–†–ò –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
//=============================================================================

// Discovery Beacon (broadcast –≤—Å—ñ–º–∞ –¥—Ä–æ–Ω–∞–º–∏)
struct DiscoveryBeacon {
    uint8_t message_type;       // 0xD1
    uint64_t mac_address;       // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π MAC ESP32
    uint8_t battery_percent;    // –†—ñ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ—ó (0-100)
    uint16_t uptime_seconds;    // –ß–∞—Å —Ä–æ–±–æ—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    uint32_t checksum;          // XOR checksum
} __attribute__((packed));

// ID Assignment (–≤—ñ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –¥–æ –¥—Ä–æ–Ω–∞)
struct IDAssignmentMessage {
    uint8_t message_type;       // 0xD2
    uint64_t coordinator_mac;   // MAC –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    uint64_t target_mac;        // MAC –¥—Ä–æ–Ω–∞-–æ—Ç—Ä–∏–º—É–≤–∞—á–∞
    uint16_t assigned_id;       // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π Drone ID
    uint32_t timestamp;         // Timestamp –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
    uint32_t checksum;
} __attribute__((packed));

// Pairing Complete (broadcast –≤—ñ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞)
struct PairingCompleteMessage {
    uint8_t message_type;       // 0xD3
    uint64_t coordinator_mac;   // MAC –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    uint8_t total_drones;       // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—Ä–æ–Ω—ñ–≤ —É —Ä–æ—ó
    uint32_t timestamp;
    uint32_t checksum;
} __attribute__((packed));

// ID Confirmation (–≤—ñ–¥ –¥—Ä–æ–Ω–∞ –¥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞)
struct IDConfirmationMessage {
    uint8_t message_type;       // 0xD4
    uint64_t my_mac;            // MAC –¥—Ä–æ–Ω–∞
    uint16_t my_id;             // –û—Ç—Ä–∏–º–∞–Ω–∏–π ID
    uint64_t coordinator_mac;   // MAC –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    uint32_t checksum;
} __attribute__((packed));

//=============================================================================
// ‚úÖ –°–¢–†–£–ö–¢–£–†–ê –í–ò–Ø–í–õ–ï–ù–û–ì–û –î–†–û–ù–ê
//=============================================================================

struct DiscoveredDrone {
    uint64_t mac_address;       // MAC –∞–¥—Ä–µ—Å–∞
    int8_t rssi;                // –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª—É
    uint8_t battery_percent;    // –†—ñ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ—ó
    unsigned long last_seen;    // –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
    bool is_paired;             // –ß–∏ –æ—Ç—Ä–∏–º–∞–≤ ID
    uint16_t assigned_id;       // –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π ID (—è–∫—â–æ —î)

    DiscoveredDrone() : mac_address(0), rssi(-120), battery_percent(0),
                        last_seen(0), is_paired(false), assigned_id(0) {}
};

//=============================================================================
// ‚úÖ –¢–ò–ü–ò –§–û–†–ú–ê–¶–Ü–ô
//=============================================================================

enum class FormationType {
    LINE,           // –õ—ñ–Ω—ñ—è
    V_SHAPE,        // V-–ø–æ–¥—ñ–±–Ω–∞
    CIRCLE,         // –ö–æ–ª–æ
    WEDGE,          // –ö–ª–∏–Ω
    SQUARE,         // –ö–≤–∞–¥—Ä–∞—Ç
    DIAMOND         // –†–æ–º–±
};

//=============================================================================
// ‚úÖ –ö–õ–ê–° SWARM PAIRING MANAGER
//=============================================================================

class SwarmPairingManager {
private:
    // –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
    uint64_t my_mac_address_;
    uint16_t my_drone_id_;
    bool is_coordinator_;
    bool pairing_complete_;
    bool pairing_button_pressed_;
    unsigned long pairing_button_press_time_;

    static constexpr uint32_t BUTTON_DEBOUNCE_MS = 50;
    static constexpr uint32_t LONG_PRESS_MS = 2000;  // 2 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è long press

    // –°–ø–∏—Å–æ–∫ –≤–∏—è–≤–ª–µ–Ω–∏—Ö –¥—Ä–æ–Ω—ñ–≤
    std::vector<DiscoveredDrone> discovered_drones_;

    // Coordinator tracking
    uint64_t coordinator_mac_;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    uint32_t beacons_sent_;
    uint32_t beacons_received_;
    uint32_t discovery_start_time_;
    // ‚úÖ –î–û–î–ê–¢–ò crypto manager
    PairingCryptoManager* crypto_manager_;

    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–±–µ—Ä—ñ–≥–∞—î public keys –≤—Å—ñ—Ö –¥—Ä–æ–Ω—ñ–≤
    std::vector<DronePublicKey> drone_public_keys_;

public:
    SwarmPairingManager();
    ~SwarmPairingManager();

    //=========================================================================
    // ‚úÖ –û–°–ù–û–í–ù–Ü –ú–ï–¢–û–î–ò AUTO-DISCOVERY
    //=========================================================================

    // –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤—Ö–æ–¥—É –≤ auto-discovery —Ä–µ–∂–∏–º
    bool EnterAutoDiscoveryMode();

    // –§–∞–∑–∏ discovery –ø—Ä–æ—Ç–æ–∫–æ–ª—É
    bool RunDiscoveryPhase();           // –§–ê–ó–ê 1: –ü–æ—à—É–∫ —Å—É—Å—ñ–¥—ñ–≤
    bool EnableCrypto();

    // ‚úÖ –î–û–î–ê–¢–ò key exchange —Ñ–∞–∑—É
    bool RunKeyExchangePhase();
    bool ElectCoordinator();            // –§–ê–ó–ê 2: –í–∏–±—ñ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    bool AssignDroneIDs();              // –§–ê–ó–ê 3: –†–æ–∑–¥–∞—á–∞ ID (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä)
    bool WaitForIDAssignment();         // –§–ê–ó–ê 3: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è ID (follower)

    //=========================================================================
    // ‚úÖ BROADCAST –¢–ê –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
    //=========================================================================

    void BroadcastDiscoveryBeacon();
    void SendIDAssignment(uint64_t target_mac, uint16_t assigned_id);
    void SendIDConfirmation(uint64_t coordinator_mac);
    bool WaitForPairingButton(uint32_t timeout_ms = 0);
    void BroadcastPairingComplete();

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    void HandleIncomingMessage(uint8_t* data, int length, int rssi);
    void HandleDiscoveryBeacon(const DiscoveryBeacon* beacon, int rssi);
    void HandleIDAssignment(const IDAssignmentMessage* msg);
    void HandlePairingComplete(const PairingCompleteMessage* msg);
    void HandleIDConfirmation(const IDConfirmationMessage* msg);

    //=========================================================================
    // ‚úÖ COORDINATOR ELECTION
    //=========================================================================

    double CalculateCoordinatorScore(uint64_t mac, uint8_t battery, int8_t rssi);
    uint64_t GetBestCoordinatorMac();
    bool AmICoordinator() const { return is_coordinator_; }

    //=========================================================================
    // ‚úÖ UTILITIES
    //=========================================================================

    uint64_t GetMyMacAddress() const { return my_mac_address_; }
    uint16_t GetMyDroneID() const { return my_drone_id_; }
    void SetMyDroneID(uint16_t id) { my_drone_id_ = id; }

    size_t GetDiscoveredDronesCount() const { return discovered_drones_.size(); }
    const std::vector<DiscoveredDrone>& GetDiscoveredDrones() const {
        return discovered_drones_;
    }

    bool IsPairingComplete() const { return pairing_complete_; }
    bool IsPairingButtonPressed();

    // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    void PrintDiscoveryStatus();
    void PrintPairingResults();

    //=========================================================================
    // ‚úÖ FORMATION HELPERS
    //=========================================================================

    Position3D CalculateFormationPosition(
            uint16_t drone_id,
            FormationType type,
            int total_drones,
            float spacing = 5.0f
    );

    const char* GetFormationName(FormationType type);
};

//=============================================================================
// ‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–Ü HELPER –§–£–ù–ö–¶–Ü–á
//=============================================================================

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è MAC –∞–¥—Ä–µ—Å–∏ ESP32
uint64_t GetESP32MacAddress();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è LoRa –¥–ª—è discovery
bool InitializeLoRaForDiscovery();

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ checksums
uint32_t CalculateChecksum(uint64_t val1, uint64_t val2 = 0, uint32_t val3 = 0);
bool VerifyChecksum(const void* message, size_t size);

// LED —ñ–Ω–¥–∏–∫–∞—Ü—ñ—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–∞–∑
void SetDiscoveryLED(bool fast_blink);  // –®–≤–∏–¥–∫–µ/–ø–æ–≤—ñ–ª—å–Ω–µ –º–∏–≥–∞–Ω–Ω—è

// EEPROM –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è pairing info
bool SavePairingInfo(uint16_t drone_id, uint64_t coordinator_mac);
bool LoadPairingInfo(uint16_t& drone_id, uint64_t& coordinator_mac);
void ClearPairingInfo();

//=============================================================================
// ‚úÖ CALLBACK –î–õ–Ø LORA INTERRUPT
//=============================================================================

// Callback —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ LoRa –ø–∞–∫–µ—Ç—É –≤ discovery mode
void OnDiscoveryMessageReceived(int packet_size);

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è interrupt handler
extern SwarmPairingManager* g_pairing_manager;

#endif // SWARM_PAIRING_H