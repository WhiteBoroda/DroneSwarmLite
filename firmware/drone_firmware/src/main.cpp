#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <LoRa.h>
#include <EEPROM.h>
#include "DroneSystem.h"
#include "HardwareConfig.h"
#include "AutonomousDroneAgent.h"

// üß† –ù–û–í–ê –ö–û–ù–¶–ï–ü–¶–Ü–Ø: –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç –¥—Ä–æ–Ω–∞
std::unique_ptr<AutonomousDroneAgent> autonomous_agent;
DistributedCommandProtocol command_protocol;
DeadReckoningNavigator navigator;
ObstacleAvoidance obstacle_avoidance;
LocalEnvironmentMap environment_map;

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –æ–±'—î–∫—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –¥—Ä–æ–Ω–∞
DroneController drone_controller;
CommunicationNode comm_node;
SensorManager sensor_manager;
FlightControl flight_control;
VideoTransmitter video_tx;
PositioningSensor uwb_sensor;
TargetingSystemInterface targeting_interface;

// –°—Ç–∞–Ω –¥—Ä–æ–Ω–∞
DroneState current_state;
DroneID my_drone_id;
bool emergency_mode = false;
bool targeting_mode = false;
bool autonomous_mode = false;      // –ù–û–í–ò–ô —Ä–µ–∂–∏–º –∞–≤—Ç–æ–Ω–æ–º—ñ—ó
bool operator_connected = false;   // –ß–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä

// –û—Å—Ç–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –º—ñ—Å—ñ—ó
DistributedCommand current_mission;
std::vector<Position3D> mission_waypoints;
size_t current_waypoint = 0;

// –¢–∞–π–º–µ—Ä–∏
unsigned long last_operator_contact = 0;
unsigned long last_swarm_contact = 0;
unsigned long last_mission_update = 0;
unsigned long last_navigation_update = 0;

void setup() {
    Serial.begin(115200);
    delay(1000);

    Serial.println("üß† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞ ESP32 üß†");

    // –ß–∏—Ç–∞–Ω–Ω—è ID –¥—Ä–æ–Ω–∞ –∑ EEPROM
    if (!loadDroneID()) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞: ID –¥—Ä–æ–Ω–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!");
        while(1) delay(1000);
    }

    Serial.printf("‚úÖ ID –¥—Ä–æ–Ω–∞: %04d\n", my_drone_id);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥—Å–∏—Å—Ç–µ–º
    if (!initializeHardware() || !initializeCommunication() || !initializeSensors()) {
        emergency_mode = true;
        return;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∏—Ö —Å–∏—Å—Ç–µ–º
    if (!initializeAutonomousSystems()) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≤—Ç–æ–Ω–æ–º–Ω–∏—Ö —Å–∏—Å—Ç–µ–º!");
        emergency_mode = true;
        return;
    }

    Serial.println("‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π –¥—Ä–æ–Ω –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!");
    sendReadySignal();
}

bool initializeAutonomousSystems() {
    Serial.println("üß† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–Ω–æ–º—ñ—ó...");

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    autonomous_agent = std::make_unique<AutonomousDroneAgent>(my_drone_id);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—ñ–≥–∞—Ç–æ—Ä–∞
    Position3D initial_pos(0, 0, 0); // –°—Ç–∞—Ä—Ç–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
    if (!navigator.Initialize(initial_pos)) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ç–æ—Ä–∞");
        return false;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—à–∫–æ–¥
    // obstacle_avoidance –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –∫–∞—Ä—Ç–∏
    // environment_map –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º—É
    autonomous_mode = false;  // –°–ø–æ—á–∞—Ç–∫—É —á–µ–∫–∞—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    operator_connected = false;

    Serial.println("‚úÖ –°–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–Ω–æ–º—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ");
    return true;
}

void loop() {
    unsigned long current_time = millis();

    // –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    if (emergency_mode) {
        handleEmergencyMode();
        return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ —Ü—ñ–ª—å
    if (targeting_mode) {
        handleTargetingMode();
        return;
    }

    // –ù–û–í–ò–ô: –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∞–≤—Ç–æ–Ω–æ–º—ñ—ó
    handleAutonomousOperation(current_time);

    // –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –¥—Ä–æ–Ω–∞
    processIncomingMessages();
    updateSensors(current_time);
    updateNavigation(current_time);
    updateMissionExecution(current_time);
    updateCommunication(current_time);
    updateVideoTransmission(current_time);
    checkSystemHealth(current_time);

    // –ö–æ—Ä–æ—Ç–∫–∏–π sleep –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –µ–Ω–µ—Ä–≥—ñ—ó
    delay(10); // 100Hz –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
}

void handleAutonomousOperation(unsigned long current_time) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≤'—è–∑–∫—É –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if (current_time - last_operator_contact > OPERATOR_TIMEOUT) {
        if (operator_connected) {
            Serial.println("‚ö†Ô∏è –í—Ç—Ä–∞—Ç–∞ –∑–≤'—è–∑–∫—É –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º - –ø–µ—Ä–µ—Ö—ñ–¥ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π —Ä–µ–∂–∏–º");
            operator_connected = false;
            autonomous_mode = true;

            // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Ä–æ–π –ø—Ä–æ –≤—Ç—Ä–∞—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            notifySwarmOperatorLost();
        }
    }

    // –õ–æ–≥—ñ–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    if (autonomous_mode) {
        handleAutonomousMode(current_time);
    }
}

void handleAutonomousMode(unsigned long current_time) {
    static unsigned long last_autonomous_decision = 0;

    if (current_time - last_autonomous_decision > 1000) { // 1Hz –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å

        // 1. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º—ñ—Å—ñ—é —è–∫—â–æ –≤–æ–Ω–∞ —î
        if (current_mission.command_type != DistributedCommand::MOVE_TO_WAYPOINT ||
            !mission_waypoints.empty()) {

            continueCurrentMission();
        }
            // 2. –Ø–∫—â–æ –Ω–µ–º–∞—î –º—ñ—Å—ñ—ó - –∫–æ–æ—Ä–¥–∏–Ω—É—î–º–æ—Å—å –∑ —Ä–æ–µ–º
        else {
            coordinateWithSwarm();
        }

        // 3. –ü–æ—Å—Ç—ñ–π–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –∫–∞—Ä—Ç—É —Ç–∞ —É–Ω–∏–∫–∞—î–º–æ –ø–µ—Ä–µ—à–∫–æ–¥
        updateEnvironmentalAwareness();

        last_autonomous_decision = current_time;
    }
}

void continueCurrentMission() {
    Serial.println("ü§ñ –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ—Å—ñ—ó");

    switch (current_mission.command_type) {
        case DistributedCommand::MOVE_TO_WAYPOINT:
            executeWaypointMission();
            break;

        case DistributedCommand::SEARCH_PATTERN:
            executeSearchMission();
            break;

        case DistributedCommand::LOITER_AREA:
            executePatrolMission();
            break;

        case DistributedCommand::ATTACK_TARGET:
            // –ê—Ç–∞–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∑ –∫–æ–º–∞–Ω–¥–æ—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            Serial.println("‚ö†Ô∏è –ê—Ç–∞–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∂—É –≤ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è");
            switchToPatrolMode();
            break;

        default:
            Serial.println("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –º—ñ—Å—ñ—ó - –ø–µ—Ä–µ—Ö–æ–¥–∂—É –≤ —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è");
            switchToHoldingPattern();
            break;
    }
}

void executeWaypointMission() {
    if (current_waypoint < mission_waypoints.size()) {
        Position3D target = mission_waypoints[current_waypoint];
        Position3D current_pos = navigator.GetEstimatedPosition();

        double distance = calculateDistance(current_pos, target);

        if (distance < 5.0) { // –î–æ—Å—è–≥–ª–∏ —Ç–æ—á–∫–∏ –∑ —Ç–æ—á–Ω—ñ—Å—Ç—é 5 –º–µ—Ç—Ä—ñ–≤
            current_waypoint++;
            Serial.printf("‚úÖ –î–æ—Å—è–≥–Ω—É—Ç–æ waypoint %d –∑ %d\n",
                          current_waypoint, mission_waypoints.size());

            if (current_waypoint >= mission_waypoints.size()) {
                Serial.println("‚úÖ –ú—ñ—Å—ñ—è –∑ waypoint –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø–µ—Ä–µ—Ö—ñ–¥ –≤ —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è");
                switchToHoldingPattern();
            }
        } else {
            // –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —à–ª—è—Ö—É –¥–æ —Ü—ñ–ª—ñ
            auto safe_path = obstacle_avoidance.PlanSafePath(current_pos, target);
            if (!safe_path.empty()) {
                sendFlightCommand(safe_path[0]); // –õ–µ—Ç–∏–º–æ –¥–æ –ø–µ—Ä—à–æ—ó –±–µ–∑–ø–µ—á–Ω–æ—ó —Ç–æ—á–∫–∏
            }
        }
    }
}

void executeSearchMission() {
    // –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –ø–∞—Ç–µ—Ä–Ω
    static int search_pattern_step = 0;
    static Position3D search_center = current_mission.area_center;
    static double search_width = 100.0; // –º–µ—Ç—Ä—ñ–≤

    Position3D current_pos = navigator.GetEstimatedPosition();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∏–≥–∑–∞–≥–æ–ø–æ–¥—ñ–±–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω –ø–æ—à—É–∫—É
    Position3D next_search_point;
    next_search_point.x = search_center.x + (search_pattern_step % 2 ? search_width : -search_width);
    next_search_point.y = search_center.y + (search_pattern_step * 20); // –ö—Ä–æ–∫ 20–º
    next_search_point.z = current_mission.altitude;

    double distance = calculateDistance(current_pos, next_search_point);
    if (distance < 10.0) {
        search_pattern_step++;
        Serial.printf("üîç –ü–æ—à—É–∫–æ–≤–∏–π –∫—Ä–æ–∫ %d –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n", search_pattern_step);
    } else {
        sendFlightCommand(next_search_point);
    }

    // –û–±–º–µ–∂–µ–Ω–Ω—è –ø–æ—à—É–∫—É
    if (search_pattern_step > 50) { // –ü—ñ—Å–ª—è 50 –∫—Ä–æ–∫—ñ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
        Serial.println("üîç –ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø–µ—Ä–µ—Ö—ñ–¥ –≤ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è");
        switchToPatrolMode();
    }
}

void executePatrolMission() {
    static double patrol_angle = 0.0;
    Position3D patrol_center = current_mission.area_center;
    double patrol_radius = current_mission.area_radius;

    // –ö—Ä—É–≥–æ–≤–µ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
    Position3D patrol_point;
    patrol_point.x = patrol_center.x + patrol_radius * cos(patrol_angle);
    patrol_point.y = patrol_center.y + patrol_radius * sin(patrol_angle);
    patrol_point.z = current_mission.altitude;

    sendFlightCommand(patrol_point);

    patrol_angle += 0.05; // –ü–æ—Å—Ç—É–ø–æ–≤–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—É—Ç–∞
    if (patrol_angle > 2 * PI) {
        patrol_angle = 0.0;
        Serial.println("üõ°Ô∏è –û–¥–∏–Ω –∫—Ä—É–≥ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }
}

void coordinateWithSwarm() {
    Serial.println("ü§ù –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –∑ —Ä–æ–µ–º –±–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞");

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–≤—ñ–π —Å—Ç–∞–Ω —ñ–Ω—à–∏–º –¥—Ä–æ–Ω–∞–º
    SwarmStatusMessage status_msg;
    status_msg.sender_id = my_drone_id;
    status_msg.position = navigator.GetEstimatedPosition();
    status_msg.battery_level = readBatteryVoltage();
    status_msg.current_mission = current_mission;
    status_msg.is_autonomous = true;
    status_msg.can_lead = (readBatteryVoltage() > 23.0); // –ú–æ–∂—É –±—É—Ç–∏ –ª—ñ–¥–µ—Ä–æ–º —è–∫—â–æ –±–∞—Ç–∞—Ä–µ—è >23V

    broadcastSwarmStatus(status_msg);

    // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —ñ–Ω—à–∏—Ö –¥—Ä–æ–Ω—ñ–≤ —ñ –ø—Ä–∏–π–º–∞—î–º–æ –∫–æ–ª–µ–∫—Ç–∏–≤–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è
    analyzeSwarmCoordination();
}

void analyzeSwarmCoordination() {
    // –ü—Ä–æ—Å—Ç–∞ –ª–æ–≥—ñ–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—ó —Ä–æ—é:
    // 1. –Ø–∫—â–æ —î –¥—Ä–æ–Ω –∑ –≤–∏—â–∏–º –∑–∞—Ä—è–¥–æ–º –±–∞—Ç–∞—Ä–µ—ó - –≤—ñ–Ω —Å—Ç–∞—î —Ç–∏–º—á–∞—Å–æ–≤–∏–º –ª—ñ–¥–µ—Ä–æ–º
    // 2. –í—Å—ñ –¥—Ä–æ–Ω–∏ –ø—Ä–æ–¥–æ–≤–∂—É—é—Ç—å –æ—Å—Ç–∞–Ω–Ω—é –æ—Ç—Ä–∏–º–∞–Ω—É –º—ñ—Å—ñ—é
    // 3. –ü—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ - –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—å–æ–º—É —Ä–æ—é

    static std::vector<SwarmStatusMessage> swarm_status;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ª—ñ–¥–µ—Ä–∏
    DroneID best_leader = findBestTemporaryLeader(swarm_status);

    if (best_leader == my_drone_id) {
        Serial.println("üëë –Ø —Ç–∏–º—á–∞—Å–æ–≤–∏–π –ª—ñ–¥–µ—Ä —Ä–æ—é");
        becomeTemporaryLeader();
    } else if (best_leader != 0) {
        Serial.printf("üë• –°–ª—ñ–¥—É—é –∑–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏–º –ª—ñ–¥–µ—Ä–æ–º %04d\n", best_leader);
        followTemporaryLeader(best_leader);
    }
}

void updateNavigation(unsigned long current_time) {
    if (current_time - last_navigation_update > 50) { // 20Hz –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó

        // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Ü—ñ–Ω–∫—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–µ–Ω—Å–æ—Ä—ñ–≤
        SensorFusion sensor_data;
        sensor_data.imu_position = sensor_manager.GetIMUPosition();
        sensor_data.uwb_position = uwb_sensor.GetPosition();
        sensor_data.barometer_altitude = sensor_manager.GetAltitude();

        navigator.IntegrateSensorData(sensor_data);
        navigator.UpdatePosition(0.05); // dt = 50ms

        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –∫–∞—Ä—Ç—É
        environment_map.UpdateFromSensors();

        last_navigation_update = current_time;
    }
}

void updateMissionExecution(unsigned long current_time) {
    if (current_time - last_mission_update > 200) { // 5Hz –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Å—ñ—ó

        if (autonomous_mode && autonomous_agent) {
            autonomous_agent->ExecuteCurrentMission();
        }

        last_mission_update = current_time;
    }
}

void handleSwarmMessage(const SwarmMessage& message, DroneID sender_id) {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É
    last_swarm_contact = millis();

    switch (message.type) {
        case MSG_DISTRIBUTED_COMMAND:
            handleDistributedCommand(message, sender_id);
            break;

        case MSG_SWARM_STATUS:
            handleSwarmStatus(message, sender_id);
            break;

        case MSG_OPERATOR_RECONNECTED:
            handleOperatorReconnection(message, sender_id);
            break;

        case MSG_TEMPORARY_LEADER:
            handleTemporaryLeaderAnnouncement(message, sender_id);
            break;

        case MSG_COORDINATION_REQUEST:
            handleCoordinationRequest(message, sender_id);
            break;

        default:
            // –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            handleStandardSwarmMessage(message, sender_id);
            break;
    }
}

void handleDistributedCommand(const SwarmMessage& message, DroneID sender_id) {
    DistributedCommand* cmd = (DistributedCommand*)message.payload;

    Serial.printf("üìã –û—Ç—Ä–∏–º–∞–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—É –∫–æ–º–∞–Ω–¥—É –≤—ñ–¥ –¥—Ä–æ–Ω–∞ %04d\n", sender_id);
    Serial.printf("   –¢–∏–ø: %d, –¶—ñ–ª—å: (%.1f, %.1f, %.1f)\n",
                  cmd->command_type, cmd->target_position.x,
                  cmd->target_position.y, cmd->target_position.z);

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É —è–∫ –ø–æ—Ç–æ—á–Ω—É –º—ñ—Å—ñ—é
    current_mission = *cmd;

    // –Ø–∫—â–æ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ –∑ waypoint - —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—é
    if (cmd->command_type == DistributedCommand::MOVE_TO_WAYPOINT) {
        mission_waypoints.clear();
        mission_waypoints.push_back(cmd->target_position);
        current_waypoint = 0;
    }

    // –Ø–∫—â–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—Ç—Ä–∞—á–µ–Ω–∏–π - –ø–æ—á–∏–Ω–∞—î–º–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    if (!operator_connected) {
        autonomous_mode = true;
        Serial.println("ü§ñ –ü–æ—á–∏–Ω–∞—é –∞–≤—Ç–æ–Ω–æ–º–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏");
    }

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏
    acknowledgeCommand(sender_id, cmd->command_id);
}

void switchToHoldingPattern() {
    Serial.println("‚è∏Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –≤ —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è");

    // –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ—Å—ñ—é –∫—Ä—É–≥–æ–≤–æ–≥–æ –ø–æ–ª—å–æ—Ç—É –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
    current_mission.command_type = DistributedCommand::LOITER_AREA;
    current_mission.area_center = navigator.GetEstimatedPosition();
    current_mission.area_radius = 50.0; // 50 –º–µ—Ç—Ä—ñ–≤
    current_mission.altitude = current_mission.area_center.z;

    autonomous_mode = true;
}

void switchToPatrolMode() {
    Serial.println("üõ°Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –≤ —Ä–µ–∂–∏–º –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è");

    current_mission.command_type = DistributedCommand::LOITER_AREA;
    current_mission.area_center = navigator.GetEstimatedPosition();
    current_mission.area_radius = 200.0; // 200 –º–µ—Ç—Ä—ñ–≤ —Ä–∞–¥—ñ—É—Å –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
    current_mission.altitude = 100.0; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∏—Å–æ—Ç–∞ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è

    autonomous_mode = true;
}

void notifySwarmOperatorLost() {
    SwarmMessage notification;
    notification.type = MSG_OPERATOR_LOST;
    notification.sender_id = my_drone_id;
    notification.timestamp = millis();

    comm_node.BroadcastMessage(notification);
    Serial.println("üì° –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ —Ä–æ–π –ø—Ä–æ –≤—Ç—Ä–∞—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞");
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
double calculateDistance(const Position3D& a, const Position3D& b) {
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2) + pow(a.z - b.z, 2));
}

void sendFlightCommand(const Position3D& target) {
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ –ø–æ–ª—ñ—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
    FlightCommand cmd;
    cmd.target_position = target;
    cmd.speed = current_mission.speed;
    cmd.timestamp = millis();

    flight_control.ExecuteCommand(cmd);
}

DroneID findBestTemporaryLeader(const std::vector<SwarmStatusMessage>& swarm) {
    DroneID best = 0;
    double best_score = -1.0;

    for (const auto& drone : swarm) {
        if (drone.can_lead && drone.is_autonomous) {
            // –†–∞—Ö—É—î–º–æ –æ—Ü—ñ–Ω–∫—É –ª—ñ–¥–µ—Ä—Å—Ç–≤–∞: –±–∞—Ç–∞—Ä–µ—è + —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å + –ø–æ–∑–∏—Ü—ñ—è
            double score = drone.battery_level * 0.5 +
                           (drone.signal_strength + 120) * 0.3 +
                           (drone.is_healthy ? 20 : 0);

            if (score > best_score) {
                best_score = score;
                best = drone.sender_id;
            }
        }
    }

    // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ —Å–æ–±–æ—é
    double my_score = readBatteryVoltage() * 0.5 +
                      (LoRa.rssi() + 120) * 0.3 +
                      (checkSelfHealth() ? 20 : 0);

    if (my_score > best_score) {
        return my_drone_id;
    }

    return best;
}

bool loadDroneID() {
    EEPROM.begin(512);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–≥—ñ—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
    uint32_t magic = 0;
    EEPROM.get(0, magic);

    if (magic != 0xDEADBEEF) {
        Serial.println("EEPROM –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π");
        return false;
    }

    // –ß–∏—Ç–∞–Ω–Ω—è ID –¥—Ä–æ–Ω–∞
    EEPROM.get(4, my_drone_id);

    if (my_drone_id == 0 || my_drone_id > 9999) {
        Serial.printf("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –¥—Ä–æ–Ω–∞: %d\n", my_drone_id);
        return false;
    }

    return true;
}

bool initializeHardware() {
    Serial.println("üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è...");

    // GPIO –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    pinMode(LED_STATUS, OUTPUT);
    pinMode(LED_COMMUNICATION, OUTPUT);
    pinMode(LED_TARGETING, OUTPUT);
    pinMode(EMERGENCY_BUTTON, INPUT_PULLUP);

    // SPI –¥–ª—è LoRa —Ç–∞ UWB
    SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, SS_LORA_PIN);

    // I2C –¥–ª—è —Å–µ–Ω—Å–æ—Ä—ñ–≤
    Wire.begin(SDA_PIN, SCL_PIN);

    // UART –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –ø–æ–ª—ñ—Ç–Ω–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º
    Serial2.begin(115200, SERIAL_8N1, FC_RX_PIN, FC_TX_PIN);

    Serial.println("‚úÖ –û–±–ª–∞–¥–Ω–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    return true;
}

bool initializeCommunication() {
    Serial.println("üì° –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–≤'—è–∑–∫—É...");

    // LoRa –º–æ–¥—É–ª—å
    LoRa.setPins(SS_LORA_PIN, RST_LORA_PIN, DIO0_LORA_PIN);

    if (!LoRa.begin(LORA_FREQUENCY)) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó LoRa");
        return false;
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è LoRa
    LoRa.setSpreadingFactor(LORA_SPREADING_FACTOR);
    LoRa.setSignalBandwidth(LORA_BANDWIDTH);
    LoRa.setCodingRate4(LORA_CODING_RATE);
    LoRa.setTxPower(LORA_TX_POWER);
    LoRa.enableCrc();

    // Callback –¥–ª—è –ø—Ä–∏–π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    LoRa.onReceive(onLoRaReceive);
    LoRa.receive();

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
    if (!comm_node.InitializeCrypto()) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è");
        return false;
    }

    Serial.println("‚úÖ –ó–≤'—è–∑–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");
    return true;
}

bool initializeSensors() {
    Serial.println("üìä –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ–Ω—Å–æ—Ä—ñ–≤...");

    // UWB –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
    if (!uwb_sensor.Initialize()) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó UWB");
        return false;
    }

    // IMU —Å–µ–Ω—Å–æ—Ä
    if (!sensor_manager.InitializeIMU()) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó IMU");
        return false;
    }

    // –ë–∞—Ä–æ–º–µ—Ç—Ä
    if (!sensor_manager.InitializeBarometer()) {
        Serial.println("‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞—Ä–æ–º–µ—Ç—Ä–∞");
        return false;
    }

    // –°–µ–Ω—Å–æ—Ä –±–∞—Ç–∞—Ä–µ—ó
    analogReadResolution(12); // 12-bit ADC

    Serial.println("‚úÖ –°–µ–Ω—Å–æ—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ");
    return true;
}

void processIncomingMessages() {
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å LoRa
    if (comm_node.HasPendingMessages()) {
        SwarmMessage message;
        DroneID sender_id;

        if (comm_node.ReceiveMessage(message, sender_id)) {
            handleSwarmMessage(message, sender_id);
        }
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ñ–¥ –ø–æ–ª—ñ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
    if (Serial2.available()) {
        processFlightControllerCommands();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤–∞—Ä—ñ–π–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
    if (digitalRead(EMERGENCY_BUTTON) == LOW) {
        emergency_mode = true;
        Serial.println("üö® –ê–í–ê–†–Ü–ô–ù–ê –ö–ù–û–ü–ö–ê –ù–ê–¢–ò–°–ù–£–¢–ê!");
    }
}

void handleSwarmMessage(const SwarmMessage& message, DroneID sender_id) {
    switch (message.type) {
        case MSG_HEARTBEAT:
            handleHeartbeat(message, sender_id);
            break;

        case MSG_FORMATION_COMMAND:
            handleFormationCommand(message);
            break;

        case MSG_LEADER_TRANSFER:
            handleLeaderTransfer(message);
            break;

        case MSG_VIDEO_SWITCH:
            handleVideoSwitch(message);
            break;

        case MSG_EMERGENCY_STOP:
            emergency_mode = true;
            Serial.println("üö® –û–¢–†–ò–ú–ê–ù–û –ö–û–ú–ê–ù–î–£ –ê–í–ê–†–Ü–ô–ù–û–á –ó–£–ü–ò–ù–ö–ò!");
            break;

        case MSG_TARGETING_ACTIVATE:
            handleTargetingActivation(message);
            break;

        case MSG_POSITION_UPDATE:
            handlePositionUpdate(message, sender_id);
            break;

        default:
            Serial.printf("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: %d\n", message.type);
            break;
    }
}

void handleTargetingActivation(const SwarmMessage& message) {
    if (message.target_drone_id == my_drone_id) {
        Serial.println("üéØ –ê–ö–¢–ò–í–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò –î–û–í–ï–î–ï–ù–ù–Ø!");

        // –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º—ñ –¥–æ–≤–µ–¥–µ–Ω–Ω—è
        targeting_mode = true;

        // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –∑–≤'—è–∑–∫–∏ (–∫—Ä—ñ–º —Å–∏—Å—Ç–µ–º–∏ –¥–æ–≤–µ–¥–µ–Ω–Ω—è)
        comm_node.DisableCommunication();
        video_tx.DisableTransmission();

        // –ê–∫—Ç–∏–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º—É –¥–æ–≤–µ–¥–µ–Ω–Ω—è —á–µ—Ä–µ–∑ UART/OSD
        targeting_interface.ActivateTerminalGuidance();

        // –°–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥ —Ä–µ–∂–∏–º—É –Ω–∞–≤–µ–¥–µ–Ω–Ω—è
        digitalWrite(LED_TARGETING, HIGH);

        Serial.println("üì° –ó–í'–Ø–ó–û–ö –í–Ü–î–ö–õ–Æ–ß–ï–ù–û - –ê–í–¢–û–ù–û–ú–ù–ò–ô –†–ï–ñ–ò–ú");
    }
}

void handleTargetingMode() {
    // –í —Ä–µ–∂–∏–º—ñ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –¥—Ä–æ–Ω –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π
    // –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –Ω–∞–¥—Ö–æ–¥—è—Ç—å —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥ —Å–∏—Å—Ç–µ–º–∏ –¥–æ–≤–µ–¥–µ–Ω–Ω—è

    static unsigned long last_targeting_check = 0;
    unsigned long current_time = millis();

    if (current_time - last_targeting_check > 100) { // 10Hz
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ –¥–æ–≤–µ–¥–µ–Ω–Ω—è
        TargetingStatus status = targeting_interface.GetStatus();

        switch (status) {
            case TARGETING_SEARCHING:
                // –ü–æ—à—É–∫ —Ü—ñ–ª—ñ
                digitalWrite(LED_TARGETING, (current_time / 200) % 2); // –ú–∏–≥–∞–Ω–Ω—è
                break;

            case TARGETING_LOCKED:
                // –¶—ñ–ª—å –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞
                digitalWrite(LED_TARGETING, HIGH);
                break;

            case TARGETING_TERMINAL:
                // –§—ñ–Ω–∞–ª—å–Ω–µ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è
                digitalWrite(LED_TARGETING, HIGH);
                // –¢—É—Ç –≤–∂–µ –Ω—ñ—è–∫–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ —Ñ—ñ–∑–∏–∫–∞
                break;

            case TARGETING_COMPLETED:
                // –ú—ñ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å–∞–º–æ–ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—è)
                handleSelfDestruct();
                break;

            case TARGETING_ERROR:
                // –ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–∏ –¥–æ–≤–µ–¥–µ–Ω–Ω—è
                emergency_mode = true;
                break;
        }

        last_targeting_check = current_time;
    }
}

void updateSensors(unsigned long current_time) {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ —Å–µ–Ω—Å–æ—Ä—ñ–≤
    if (current_time - last_position_update > 50) { // 20Hz –¥–ª—è UWB
        uwb_sensor.UpdatePosition();
        last_position_update = current_time;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó
    if (current_time - last_telemetry > 100) { // 10Hz
        current_state.battery_voltage = readBatteryVoltage();
        current_state.temperature = sensor_manager.GetTemperature();
        current_state.altitude = sensor_manager.GetAltitude();

        last_telemetry = current_time;
    }
}

void updateCommunication(unsigned long current_time) {
    if (targeting_mode) return; // –ó–≤'—è–∑–æ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ heartbeat
    if (current_time - last_heartbeat > 500) { // 2Hz
        sendHeartbeat();
        last_heartbeat = current_time;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ —Å–∏–≥–Ω–∞–ª—É —Ç–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è
    int rssi = LoRa.rssi();
    if (rssi < RSSI_THRESHOLD) {
        // –ó–±—ñ–ª—å—à—É—î–º–æ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å
        int current_power = LoRa.getTxPower();
        if (current_power < MAX_LORA_POWER) {
            LoRa.setTxPower(current_power + 1);
            Serial.printf("üì° –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ LoRa: %d dBm\n", current_power + 1);
        }
    }

    // –ú–∏–≥–∞–Ω–Ω—è —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥–∞ –∑–≤'—è–∑–∫—É
    digitalWrite(LED_COMMUNICATION, (current_time / 500) % 2);
}

void updateFlightControl(unsigned long current_time) {
    if (targeting_mode) return; // –ü–æ–ª—ñ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—é—î —Å–∏—Å—Ç–µ–º–∞ –¥–æ–≤–µ–¥–µ–Ω–Ω—è

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ü—ñ—ó
    if (current_time - last_formation_check > 200) { // 5Hz
        flight_control.UpdateFormationPosition();
        last_formation_check = current_time;
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞ –ø–æ–ª—ñ—Ç–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä
    flight_control.SendControlCommands();
}

void checkSystemHealth(unsigned long current_time) {
    static unsigned long last_health_check = 0;

    if (current_time - last_health_check > 1000) { // 1Hz
        bool system_healthy = true;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞—Ç–∞—Ä–µ—ó
        float battery_voltage = readBatteryVoltage();
        if (battery_voltage < BATTERY_CRITICAL_VOLTAGE) {
            Serial.printf("üö® –ö–†–ò–¢–ò–ß–ù–ê –ë–ê–¢–ê–†–ï–Ø: %.2fV\n", battery_voltage);
            emergency_mode = true;
            system_healthy = false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
        float temperature = sensor_manager.GetTemperature();
        if (temperature > MAX_OPERATING_TEMPERATURE) {
            Serial.printf("üö® –ü–ï–†–ï–ì–†–Ü–í: %.1f¬∞C\n", temperature);
            emergency_mode = true;
            system_healthy = false;
        }

        // –°—Ç–∞—Ç—É—Å —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥–∞
        digitalWrite(LED_STATUS, system_healthy ? HIGH : LOW);

        last_health_check = current_time;
    }
}

void handleEmergencyMode() {
    static bool emergency_initialized = false;

    if (!emergency_initialized) {
        Serial.println("üö® –í–•–Ü–î –í –ê–í–ê–†–Ü–ô–ù–ò–ô –†–ï–ñ–ò–ú!");

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—É –ª–∏—Ö–∞
        LoRa.setTxPower(MAX_LORA_POWER);

        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª—É –ª–∏—Ö–∞
        sendEmergencySignal();

        // –ó–∞–≤–∏—Å–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó
        flight_control.EmergencyHover();

        emergency_initialized = true;
    }

    // –®–≤–∏–¥–∫–µ –º–∏–≥–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥—ñ–≤
    unsigned long current_time = millis();
    bool led_state = (current_time / 100) % 2;
    digitalWrite(LED_STATUS, led_state);
    digitalWrite(LED_COMMUNICATION, led_state);
    digitalWrite(LED_TARGETING, led_state);

    // –¢–∞–π–º–µ—Ä –¥–æ —Å–∞–º–æ–ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó
    static unsigned long emergency_start = millis();
    if (current_time - emergency_start > EMERGENCY_TIMEOUT) {
        handleSelfDestruct();
    }
}

void handleSelfDestruct() {
    Serial.println("üí• –Ü–ù–Ü–¶–Ü–ê–¶–Ü–Ø –°–ê–ú–û–õ–Ü–ö–í–Ü–î–ê–¶–Ü–á");

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    sendFinalMessage();

    // –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º
    comm_node.Shutdown();
    video_tx.Shutdown();
    sensor_manager.Shutdown();

    // –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Å–∞–º–æ–∑–Ω–∏—â–µ–Ω–Ω—è
    // –£–í–ê–ì–ê: –¢—É—Ç –º–∞—î –±—É—Ç–∏ –∫–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é!
    // –ü–æ–∫–∏ —â–æ —Ç—ñ–ª—å–∫–∏ —Å–∏–º—É–ª—è—Ü—ñ—è
    for (int i = 10; i > 0; i--) {
        Serial.printf("üí• –°–∞–º–æ–ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—è —á–µ—Ä–µ–∑ %d —Å–µ–∫—É–Ω–¥\n", i);
        delay(1000);
    }

    Serial.println("üí• –°–ò–°–¢–ï–ú–ê –ó–ù–ò–©–ï–ù–ê");

    // –ü–æ–≤–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ ESP32
    esp_deep_sleep_start();
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
float readBatteryVoltage() {
    int raw = analogRead(BATTERY_VOLTAGE_PIN);
    return (raw / 4095.0) * BATTERY_VOLTAGE_DIVIDER * 3.3;
}

void sendHeartbeat() {
    SwarmMessage heartbeat;
    heartbeat.type = MSG_HEARTBEAT;
    heartbeat.sender_id = my_drone_id;
    heartbeat.timestamp = millis();
    heartbeat.battery_level = readBatteryVoltage();
    heartbeat.signal_strength = LoRa.rssi();

    comm_node.BroadcastMessage(heartbeat);
}

void sendReadySignal() {
    SwarmMessage ready;
    ready.type = MSG_DRONE_READY;
    ready.sender_id = my_drone_id;
    ready.timestamp = millis();

    comm_node.BroadcastMessage(ready);
    Serial.println("üì° –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");
}

void sendEmergencySignal() {
    SwarmMessage emergency;
    emergency.type = MSG_EMERGENCY_SIGNAL;
    emergency.sender_id = my_drone_id;
    emergency.timestamp = millis();

    for (int i = 0; i < 5; i++) {
        comm_node.BroadcastMessage(emergency);
        delay(100);
    }

    Serial.println("üö® –°–∏–≥–Ω–∞–ª –ª–∏—Ö–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");
}

void sendFinalMessage() {
    SwarmMessage final_msg;
    final_msg.type = MSG_FINAL_TRANSMISSION;
    final_msg.sender_id = my_drone_id;
    final_msg.timestamp = millis();

    comm_node.BroadcastMessage(final_msg);
    Serial.println("üì° –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");
}

// Callback –¥–ª—è LoRa
void onLoRaReceive(int packetSize) {
    if (targeting_mode) return; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–≤–µ–¥–µ–Ω–Ω—è
    comm_node.ProcessIncomingPacket(packetSize);
}

// –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑ —Å–µ—Ä—ñ–π–Ω–æ–≥–æ –ø–æ—Ä—Ç—É (–¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)
void serialEvent() {
    while (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        command.trim();

        if (command.startsWith("set_drone_id ")) {
            DroneID new_id = command.substring(13).toInt();
            if (new_id > 0 && new_id <= 9999) {
                EEPROM.put(0, 0xDEADBEEF); // Magic number
                EEPROM.put(4, new_id);
                EEPROM.commit();
                Serial.printf("‚úÖ ID –¥—Ä–æ–Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %04d\n", new_id);
                Serial.println("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏...");
                delay(3000);
                ESP.restart();
            } else {
                Serial.println("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –¥—Ä–æ–Ω–∞ (1-9999)");
            }
        }
        else if (command == "status") {
            printDroneStatus();
        }
        else if (command == "emergency") {
            emergency_mode = true;
        }
        else if (command == "restart") {
            ESP.restart();
        }
    }
}

void printDroneStatus() {
    Serial.println("\n=== –°–¢–ê–ù –î–†–û–ù–ê ===");
    Serial.printf("ID: %04d\n", my_drone_id);
    Serial.printf("–ë–∞—Ç–∞—Ä–µ—è: %.2fV\n", readBatteryVoltage());
    Serial.printf("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n", sensor_manager.GetTemperature());
    Serial.printf("RSSI: %d dBm\n", LoRa.rssi());
    Serial.printf("–†–µ–∂–∏–º: %s\n", targeting_mode ? "–ù–ê–í–ï–î–ï–ù–ù–Ø" : (emergency_mode ? "–ê–í–ê–†–Ü–ô–ù–ò–ô" : "–ù–û–†–ú–ê–õ–¨–ù–ò–ô"));
    Serial.println("==================\n");
}