#include <iostream>
#include <signal.h>
#include <atomic>
#include <thread>
#include <chrono>
#include "../include/SwarmTypes.h"
#include "../include/DistributedPositioning.h"
#include "../include/MeshProtocol.h"
#include "../include/DistributedPositioning.h"

// üá∫üá¶ –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—î–º –¥—Ä–æ–Ω—ñ–≤ üá∫üá¶

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
std::atomic<bool> g_shutdown_requested{false};

void SignalHandler(int signal) {
    std::cout << "\n–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª " << signal << ". –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏..." << std::endl;
    g_shutdown_requested = true;
}

void PrintBanner() {
    std::cout << R"(
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                –†–û–ó–ü–û–î–Ü–õ–ï–ù–ê –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –†–û–Ñ–ú           ‚ïë
‚ïë                         v2.0.0-MESH                         ‚ïë
‚ïë                                                              ‚ïë
‚ïë              üá∫üá¶ SLAVA UKRAINI! HEROIAM SLAVA! üá∫üá¶            ‚ïë
‚ïë                                                              ‚ïë
‚ïë  ‚ö° Mesh-–º–µ—Ä–µ–∂–∞      ‚öì –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —è–∫—ñ—Ä     ü§ñ –ê–≤—Ç–æ–Ω–æ–º—ñ—è     ‚ïë
‚ïë  üîí –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è      üõ°Ô∏è –ñ–∏–≤—É—á—ñ—Å—Ç—å          üì° –ë–µ–∑ GPS       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
)" << std::endl;
}

void PrintDroneStatus(const std::vector<SwarmSystem::DroneState>& swarm_status) {
    std::cout << "\n=== –°–¢–ê–ù –†–û–ó–ü–û–î–Ü–õ–ï–ù–û–ì–û –†–û–Æ ===" << std::endl;
    std::cout << "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê" << std::endl;
    std::cout << "‚îÇ ID   ‚îÇ –†–æ–ª—å       ‚îÇ –ë–∞—Ç–∞—Ä–µ—è (%) ‚îÇ –ó–≤'—è–∑–æ–∫  ‚îÇ –ü–æ–∑–∏—Ü—ñ—è    ‚îÇ –ê–≤—Ç–æ–Ω–æ–º—ñ—è    ‚îÇ" << std::endl;
    std::cout << "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§" << std::endl;

    for (const auto& drone : swarm_status) {
        std::string role_str = SwarmSystem::SwarmUtils::DroneRoleToString(drone.role);
        std::string comm_str = SwarmSystem::SwarmUtils::CommunicationStatusToString(drone.comm_status);
        std::string autonomy_str = drone.is_autonomous ? "–ê–í–¢–û–ù–û–ú–ù–ò–ô" : "–ö–ï–†–û–í–ê–ù–ò–ô";

        printf("‚îÇ %04d ‚îÇ %-10s ‚îÇ %8.1f    ‚îÇ %-8s ‚îÇ %6.1f,%4.1f ‚îÇ %-12s ‚îÇ\n",
               drone.id, role_str.c_str(), drone.battery_level, comm_str.c_str(),
               drone.relative_position.x(), drone.relative_position.y(), autonomy_str.c_str());
    }

    std::cout << "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò" << std::endl;
}

void PrintMeshStatus(const MeshNetwork::NetworkStats& mesh_stats) {
    std::cout << "\n=== –°–¢–ê–ù MESH-–ú–ï–†–ï–ñ–Ü ===" << std::endl;
    std::cout << "üìä –ü–∞–∫–µ—Ç—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: " << mesh_stats.packets_sent << std::endl;
    std::cout << "üì® –ü–∞–∫–µ—Ç—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ:  " << mesh_stats.packets_received << std::endl;
    std::cout << "üîÑ –ü–∞–∫–µ—Ç—ñ–≤ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: " << mesh_stats.packets_forwarded << std::endl;
    std::cout << "‚ùå –ü–∞–∫–µ—Ç—ñ–≤ –≤—Ç—Ä–∞—á–µ–Ω–æ:  " << mesh_stats.packets_dropped << std::endl;
    std::cout << "üîç –ü–æ—à—É–∫—ñ–≤ –º–∞—Ä—à—Ä—É—Ç—ñ–≤: " << mesh_stats.route_discoveries << std::endl;
    std::cout << "‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∞:  " << mesh_stats.average_latency << " –º—Å" << std::endl;
}

void PrintPositioningStatus(const DistributedPositioning::DistributedPositioningSystem& pos_system) {
    std::cout << "\n=== –°–¢–ê–ù –ü–û–ó–ò–¶–Ü–û–ù–£–í–ê–ù–ù–Ø ===" << std::endl;

    auto anchor = pos_system.GetCurrentAnchor();
    std::cout << "‚öì –¢–∏–ø —è–∫–æ—Ä—è: ";
    switch (anchor.type) {
        case DistributedPositioning::AnchorType::GEOMETRIC_CENTER:
            std::cout << "–ì–ï–û–ú–ï–¢–†–ò–ß–ù–ò–ô –¶–ï–ù–¢–†"; break;
        case DistributedPositioning::AnchorType::MOST_STABLE_DRONE:
            std::cout << "–ù–ê–ô–°–¢–ê–ë–Ü–õ–¨–ù–Ü–®–ò–ô –î–†–û–ù (" << anchor.anchor_drone_id << ")"; break;
        case DistributedPositioning::AnchorType::EXTERNAL_REFERENCE:
            std::cout << "–ó–û–í–ù–Ü–®–ù–Ü–ô –†–ï–§–ï–†–ï–ù–°"; break;
        default:
            std::cout << "–ù–ï–í–ò–ó–ù–ê–ß–ï–ù–û"; break;
    }
    std::cout << std::endl;

    std::cout << "üìç –ü–æ–∑–∏—Ü—ñ—è —è–∫–æ—Ä—è: (" << anchor.position.x() << ", "
              << anchor.position.y() << ", " << anchor.position.z() << ")" << std::endl;
    std::cout << "üí™ –°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å: " << (anchor.stability_score * 100) << "%" << std::endl;
    std::cout << "üéØ –¢–æ—á–Ω—ñ—Å—Ç—å: ¬±" << pos_system.GetPositioningAccuracy() << " –º" << std::endl;
    std::cout << "üë• –î—Ä–æ–Ω—ñ–≤ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è: " << pos_system.GetTrackedSwarmSize() << std::endl;
}

void PrintHelp() {
    std::cout << R"(
–î–û–°–¢–£–ü–ù–Ü –ö–û–ú–ê–ù–î–ò –†–û–ó–ü–û–î–Ü–õ–ï–ù–û–á –°–ò–°–¢–ï–ú–ò:
  h, help         - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
  s, status       - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω —Ä–æ—é —Ç–∞ mesh-–º–µ—Ä–µ–∂—ñ
  mesh            - –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ mesh-—Ç–æ–ø–æ–ª–æ–≥—ñ—é
  pos, position   - –°—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
  autonomous      - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä—ñ–π –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π —Ä–µ–∂–∏–º

–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ú–Ü–°–Ü–Ñ–Æ:
  takeoff         - –ü–æ—á–∞—Ç–∏ –º—ñ—Å—ñ—é (–∑–ª—ñ—Ç)
  formation <type>- –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ä–º–∞—Ü—ñ—é (1=–∫–ª–∏–Ω, 2=–ª—ñ–Ω—ñ—è, 3=–∫–≤–∞–¥—Ä–∞—Ç)
  waypoint <x> <y>- –†—É—Ö –¥–æ —Ç–æ—á–∫–∏
  search <x> <y>  - –ü–æ—à—É–∫ –≤ –∑–æ–Ω—ñ
  patrol <x> <y>  - –ü–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ —Ç–æ—á–∫–∏

–í–Ü–î–ï–û –¢–ê –ó–í'–Ø–ó–û–ö:
  video <drone_id>- –ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ –Ω–∞ –¥—Ä–æ–Ω
  frequency       - –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É –∑–≤'—è–∑–∫—É
  power <level>   - –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—á–∞

–ê–í–ê–†–Ü–ô–ù–Ü –ö–û–ú–ê–ù–î–ò:
  emergency       - –ê–í–ê–†–Ü–ô–ù–ê –ó–£–ü–ò–ù–ö–ê
  self_destruct   - –°–∞–º–æ–ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –≤ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö)

–ù–ê–õ–ê–ì–û–î–ñ–ï–ù–ù–Ø:
  simulate <count>- –°–∏–º—É–ª—è—Ü—ñ—è N –¥—Ä–æ–Ω—ñ–≤
  test_mesh       - –¢–µ—Å—Ç mesh-–∑–≤'—è–∑–∫—É
  anchor_vote     - –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–æ–≤–∏–π —è–∫—ñ—Ä

–ü–†–ò–ö–õ–ê–î–ò:
  formation 1         # –ö–ª–∏–Ω
  waypoint 100 200    # –†—É—Ö –¥–æ —Ç–æ—á–∫–∏ (100, 200)
  search 500 300      # –ü–æ—à—É–∫ –≤ –∑–æ–Ω—ñ 500x300
  video 0202          # –í—ñ–¥–µ–æ –∑ –¥—Ä–æ–Ω–∞ 0202
  autonomous          # –ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º—ñ—è —Ä–æ—é
)" << std::endl;
}

int main(int argc, char* argv[]) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    if (argc < 2) {
        std::cerr << "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: " << argv[0] << " <drone_id> [config_path]" << std::endl;
        std::cerr << "–ü—Ä–∏–∫–ª–∞–¥: " << argv[0] << " 0201 ./config/swarm_config.yaml" << std::endl;
        return 1;
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤
    signal(SIGINT, SignalHandler);
    signal(SIGTERM, SignalHandler);

    PrintBanner();

    // –ü–∞—Ä—Å–∏–Ω–≥ ID –¥—Ä–æ–Ω–∞
    SwarmSystem::DroneID my_id = static_cast<SwarmSystem::DroneID>(std::stoul(argv[1]));
    std::string config_path = (argc > 2) ? argv[2] : "./config/swarm_config.yaml";

    if (!VALIDATE_DRONE_ID(my_id)) {
        std::cerr << "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –¥—Ä–æ–Ω–∞: " << my_id << std::endl;
        return 1;
    }

    std::cout << "üöÅ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞ ID: " << my_id << std::endl;
    std::cout << "üìÅ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: " << config_path << std::endl;

    try {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—î–º
        SwarmSystem::DistributedSwarmManager swarm_manager(config_path, my_id);

        std::cout << "‚öôÔ∏è  –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏..." << std::endl;
        if (!swarm_manager.Initialize()) {
            std::cerr << "‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É!" << std::endl;
            return 1;
        }

        std::cout << "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏..." << std::endl;
        if (!swarm_manager.Start()) {
            std::cerr << "‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É!" << std::endl;
            return 1;
        }

        std::cout << "\n‚úÖ –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—î–º –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!" << std::endl;
        std::cout << "üì° Mesh-–º–µ—Ä–µ–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞" << std::endl;
        std::cout << "üó∫Ô∏è –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–µ" << std::endl;
        std::cout << "ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ñ –∞–≥–µ–Ω—Ç–∏ –≥–æ—Ç–æ–≤—ñ" << std::endl;

        auto current_phase = swarm_manager.GetCurrentPhase();
        std::cout << "üéØ –§–∞–∑–∞ –º—ñ—Å—ñ—ó: " << static_cast<int>(current_phase) << std::endl;

        PrintHelp();

        // –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        std::string command;
        bool mission_started = false;

        while (!g_shutdown_requested) {
            std::cout << "\nmesh[" << my_id << "]> ";

            if (!std::getline(std::cin, command)) {
                break; // EOF –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É
            }

            if (command.empty()) continue;

            // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥–∏
            std::istringstream iss(command);
            std::string cmd;
            iss >> cmd;

            if (cmd == "h" || cmd == "help") {
                PrintHelp();
            }
            else if (cmd == "s" || cmd == "status") {
                auto swarm_status = swarm_manager.GetSwarmStatus();
                PrintDroneStatus(swarm_status);

                std::cout << "\nüìä –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:" << std::endl;
                std::cout << "  –§–∞–∑–∞ –º—ñ—Å—ñ—ó: " << static_cast<int>(swarm_manager.GetCurrentPhase()) << std::endl;
                std::cout << "  –°—Ç–∞–Ω –∑–≤'—è–∑–∫—É: " << SwarmSystem::SwarmUtils::CommunicationStatusToString(
                        swarm_manager.GetCommunicationStatus()) << std::endl;
                std::cout << "  –†–æ–∑–º—ñ—Ä —Ä–æ—é: " << swarm_status.size() << " –¥—Ä–æ–Ω—ñ–≤" << std::endl;

                // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º–∏
                auto stats = swarm_manager.GetSystemStats();
                std::cout << "  –ß–∞—Å —Ä–æ–±–æ—Ç–∏: " << (stats.uptime_ms / 1000) << " —Å–µ–∫" << std::endl;
                std::cout << "  –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: " << stats.messages_sent << " –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ, "
                          << stats.messages_received << " –æ—Ç—Ä–∏–º–∞–Ω–æ" << std::endl;
            }
            else if (cmd == "mesh") {
                auto mesh_stats = swarm_manager.GetMeshStats();
                PrintMeshStatus(mesh_stats);

                auto connected_drones = swarm_manager.GetConnectedDrones();
                std::cout << "\nüï∏Ô∏è –ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥—Ä–æ–Ω–∏ (" << connected_drones.size() << "):" << std::endl;
                for (auto drone_id : connected_drones) {
                    std::cout << "  üì° " << drone_id;
                    if (drone_id == my_id) std::cout << " (–Ø)";
                    std::cout << std::endl;
                }
            }
            else if (cmd == "pos" || cmd == "position") {
                auto& pos_system = swarm_manager.GetPositioningSystem();
                PrintPositioningStatus(pos_system);

                auto all_positions = pos_system.GetAllDronePositions();
                std::cout << "\nüìç –ü–æ–∑–∏—Ü—ñ—ó –¥—Ä–æ–Ω—ñ–≤:" << std::endl;
                for (const auto& [drone_id, position] : all_positions) {
                    std::cout << "  " << drone_id << ": ("
                              << position.x() << ", " << position.y() << ", " << position.z() << ")";
                    if (drone_id == my_id) std::cout << " ‚¨ÖÔ∏è –Ø";
                    std::cout << std::endl;
                }
            }
            else if (cmd == "autonomous") {
                if (swarm_manager.EnableFullAutonomy()) {
                    std::cout << "‚úÖ –†—ñ–π –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π —Ä–µ–∂–∏–º" << std::endl;
                    std::cout << "ü§ñ –î—Ä–æ–Ω–∏ –ø—Ä–æ–¥–æ–≤–∂–∞—Ç—å –º—ñ—Å—ñ—é —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ" << std::endl;
                } else {
                    std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π —Ä–µ–∂–∏–º" << std::endl;
                }
            }
            else if (cmd == "takeoff") {
                if (!mission_started) {
                    if (swarm_manager.StartMission(SwarmSystem::FormationType::WEDGE)) {
                        std::cout << "‚úÖ –ú—ñ—Å—ñ—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞! –ó–ª—ñ—Ç –≤ —Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–ª–∏–Ω..." << std::endl;
                        mission_started = true;
                    } else {
                        std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –º—ñ—Å—ñ—ó" << std::endl;
                    }
                } else {
                    std::cout << "‚ö†Ô∏è  –ú—ñ—Å—ñ—è –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∞" << std::endl;
                }
            }
            else if (cmd == "formation") {
                int formation_type;
                if (iss >> formation_type) {
                    SwarmSystem::FormationType formation;
                    switch (formation_type) {
                        case 1: formation = SwarmSystem::FormationType::WEDGE; break;
                        case 2: formation = SwarmSystem::FormationType::LINE_HORIZONTAL; break;
                        case 3: formation = SwarmSystem::FormationType::SQUARE; break;
                        case 4: formation = SwarmSystem::FormationType::DIAMOND; break;
                        case 5: formation = SwarmSystem::FormationType::CIRCLE; break;
                        default:
                            std::cout << "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ —Ñ–æ—Ä–º–∞—Ü—ñ—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ 1-5" << std::endl;
                            continue;
                    }

                    if (swarm_manager.ChangeFormation(formation)) {
                        std::cout << "‚úÖ –§–æ—Ä–º–∞—Ü—ñ—è –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ "
                                  << SwarmSystem::SwarmUtils::FormationTypeToString(formation) << std::endl;
                    } else {
                        std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Ñ–æ—Ä–º–∞—Ü—ñ—ó" << std::endl;
                    }
                } else {
                    std::cout << "‚ùå –í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º–∞—Ü—ñ—ó (1-5)" << std::endl;
                }
            }
            else if (cmd == "waypoint") {
                double x, y;
                if (iss >> x >> y) {
                    SwarmSystem::Position3D target(x, y, 100.0); // –í–∏—Å–æ—Ç–∞ 100–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                    if (swarm_manager.SendWaypointCommand(target)) {
                        std::cout << "‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä—É—Ö—É –¥–æ —Ç–æ—á–∫–∏ (" << x << ", " << y << ") –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —Ä–æ—é" << std::endl;
                    } else {
                        std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–∏" << std::endl;
                    }
                } else {
                    std::cout << "‚ùå –í–∫–∞–∂—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: waypoint <x> <y>" << std::endl;
                }
            }
            else if (cmd == "search") {
                double x, y;
                if (iss >> x >> y) {
                    SwarmSystem::Position3D center(x, y, 80.0);
                    if (swarm_manager.SendSearchCommand(center, 200.0, 200.0)) {
                        std::cout << "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ—à—É–∫—É –≤ –∑–æ–Ω—ñ (" << x << ", " << y << ") –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —Ä–æ—é" << std::endl;
                    } else {
                        std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–∏ –ø–æ—à—É–∫—É" << std::endl;
                    }
                } else {
                    std::cout << "‚ùå –í–∫–∞–∂—ñ—Ç—å —Ü–µ–Ω—Ç—Ä –∑–æ–Ω–∏: search <x> <y>" << std::endl;
                }
            }
            else if (cmd == "patrol") {
                double x, y;
                if (iss >> x >> y) {
                    SwarmSystem::Position3D center(x, y, 100.0);
                    if (swarm_manager.SendPatrolCommand(center, 150.0)) {
                        std::cout << "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ (" << x << ", " << y << ") –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —Ä–æ—é" << std::endl;
                    } else {
                        std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–∏ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è" << std::endl;
                    }
                } else {
                    std::cout << "‚ùå –í–∫–∞–∂—ñ—Ç—å —Ü–µ–Ω—Ç—Ä –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è: patrol <x> <y>" << std::endl;
                }
            }
            else if (cmd == "video") {
                SwarmSystem::DroneID video_source;
                if (iss >> video_source) {
                    if (swarm_manager.SetVideoSource(video_source)) {
                        std::cout << "‚úÖ –í—ñ–¥–µ–æ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–æ –Ω–∞ –¥—Ä–æ–Ω " << video_source << std::endl;
                    } else {
                        std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤—ñ–¥–µ–æ" << std::endl;
                    }
                } else {
                    std::cout << "‚ùå –í–∫–∞–∂—ñ—Ç—å ID –¥—Ä–æ–Ω–∞ –¥–ª—è –≤—ñ–¥–µ–æ" << std::endl;
                }
            }
            else if (cmd == "anchor_vote") {
                if (swarm_manager.InitiateAnchorVoting()) {
                    std::cout << "‚úÖ –Ü–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–æ–≤–∏–π —è–∫—ñ—Ä" << std::endl;
                } else {
                    std::cout << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è" << std::endl;
                }
            }
            else if (cmd == "test_mesh") {
                if (swarm_manager.TestMeshConnectivity()) {
                    std::cout << "‚úÖ –¢–µ—Å—Ç mesh-–∑–≤'—è–∑–∫—É –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ" << std::endl;
                } else {
                    std::cout << "‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ mesh-–∑–≤'—è–∑–∫–æ–º" << std::endl;
                }
            }
            else if (cmd == "simulate") {
                int count;
                if (iss >> count && count > 0 && count <= 20) {
                    std::cout << "üéÆ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó " << count << " –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏—Ö –¥—Ä–æ–Ω—ñ–≤..." << std::endl;
                    swarm_manager.StartSimulation(count);
                } else {
                    std::cout << "‚ùå –í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—Ä–æ–Ω—ñ–≤ (1-20)" << std::endl;
                }
            }
            else if (cmd == "emergency") {
                std::cout << "üö® –ê–í–ê–†–Ü–ô–ù–ê –ó–£–ü–ò–ù–ö–ê –ê–ö–¢–ò–í–û–í–ê–ù–ê!" << std::endl;
                swarm_manager.EmergencyStop();
                std::cout << "‚è∏Ô∏è  –í—Å—ñ –¥—Ä–æ–Ω–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ñ –≤ —Ä–µ–∂–∏–º –∑–∞–≤–∏—Å–∞–Ω–Ω—è" << std::endl;
                break;
            }
            else if (cmd == "self_destruct") {
                std::cout << "‚ö†Ô∏è  –£–í–ê–ì–ê: –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è —Å–∞–º–æ–ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó!" << std::endl;
                std::cout << "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥–æ—é: YES_DESTROY_ALL" << std::endl;

                std::string confirmation;
                std::cin >> confirmation;
                if (confirmation == "YES_DESTROY_ALL") {
                    std::cout << "üí• –°–ê–ú–û–õ–Ü–ö–í–Ü–î–ê–¶–Ü–Ø –ê–ö–¢–ò–í–û–í–ê–ù–ê!" << std::endl;
                    swarm_manager.InitiateSelfDestruct();
                    return 0;
                } else {
                    std::cout << "‚ùå –°–∞–º–æ–ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ" << std::endl;
                }
            }
            else if (cmd == "q" || cmd == "quit" || cmd == "exit") {
                std::cout << "–í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏..." << std::endl;
                break;
            }
            else {
                std::cout << "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: " << cmd << std::endl;
                std::cout << "–í–≤–µ–¥—ñ—Ç—å 'help' –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥" << std::endl;
            }
        }

        // –ö–æ—Ä–µ–∫—Ç–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º–∏
        std::cout << "\n‚èπÔ∏è  –ó—É–ø–∏–Ω–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—î–º..." << std::endl;
        swarm_manager.Stop();

    }
    catch (const std::exception& e) {
        std::cerr << "üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: " << e.what() << std::endl;
        return 1;
    }
    catch (...) {
        std::cerr << "üí• –ù–ï–í–Ü–î–û–ú–ê –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê!" << std::endl;
        return 1;
    }

    std::cout << "\n‚úÖ –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—î–º –∑—É–ø–∏–Ω–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ" << std::endl;
    std::cout << "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–∞" << std::endl;
    std::cout << "\nüá∫üá¶ SLAVA UKRAINI! HEROIAM SLAVA! üá∫üá¶" << std::endl;

    return 0;
}