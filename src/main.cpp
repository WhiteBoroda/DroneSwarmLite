// src/main.cpp - –ò–°–ü–†–ê–í–õ–ï–ù: –∑–∞–º–µ–Ω–∏—Ç—å DistributedSwarmManager –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
// üá∫üá¶ –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª —Å–∏—Å—Ç–µ–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—î–º –¥—Ä–æ–Ω—ñ–≤ üá∫üá¶

#include <iostream>
#include <signal.h>
#include <atomic>
#include <thread>
#include <chrono>
#include <memory>
#include <sstream>

// –û–°–ù–û–í–ù–´–ï –ú–û–î–£–õ–ò –°–ò–°–¢–ï–ú–´
#include "../include/SwarmTypes.h"
#include "../include/DistributedPositioning.h"
#include "../include/MeshProtocol.h"
#include "../include/AutonomousDroneAgent.h"
#include "../include/CommunicationManager.h"
#include "../include/UWBManager.h"
#include "../include/ConfigManager.h"
#include "../include/CryptoManager.h"
#include "../include/ConfigWatcher.h"

using namespace SwarmSystem;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
std::atomic<bool> g_shutdown_requested{false};
DroneID my_id = 0;
std::string config_path;

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã (–≤–º–µ—Å—Ç–æ DistributedSwarmManager!)
std::unique_ptr<ConfigManager> config_manager;
std::unique_ptr<SwarmControl::CommunicationManager> comm_manager;
std::unique_ptr<MeshNetwork::SwarmMeshProtocol> mesh_protocol;
std::unique_ptr<DistributedPositioning::DistributedPositionTracker> position_tracker;
std::unique_ptr<AutonomousDroneAgent> drone_agent;
std::unique_ptr<UWBManager> uwb_manager;
std::unique_ptr<CryptoManager> crypto_manager;

void SignalHandler(int signal) {
    std::cout << "\n–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª " << signal << ". –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏..." << std::endl;
    g_shutdown_requested = true;
}

void PrintBanner() {
    std::cout << R"(
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                –†–û–ó–ü–û–î–Ü–õ–ï–ù–ê –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –†–û–Ñ–ú           ‚ïë
‚ïë                         v2.0.0-MESH                         ‚ïë
‚ïë                                                              ‚ïë
‚ïë              üá∫üá¶ SLAVA UKRAINI! HEROIAM SLAVA! üá∫üá¶            ‚ïë
‚ïë                                                              ‚ïë
‚ïë  ‚ö° Mesh-–º–µ—Ä–µ–∂–∞      ‚öì –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —è–∫—ñ—Ä     ü§ñ –ê–≤—Ç–æ–Ω–æ–º—ñ—è     ‚ïë
‚ïë  üîí –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è      üõ°Ô∏è –ñ–∏–≤—É—á—ñ—Å—Ç—å          üì° –ë–µ–∑ GPS       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
)" << std::endl;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bool InitializeAllSystems() {
    std::cout << "‚öôÔ∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏..." << std::endl;

    // 1. ConfigManager
    config_manager = std::make_unique<ConfigManager>(config_path);
    if (!config_manager->IsLoaded()) {
        std::cerr << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é!" << std::endl;
        return false;
    }

    // 2. CryptoManager
    crypto_manager = std::make_unique<CryptoManager>();
    if (!crypto_manager->Initialize()) {
        std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ—ñ—ó!" << std::endl;
        return false;
    }

    // 3. CommunicationManager
    comm_manager = std::make_unique<SwarmControl::CommunicationManager>(my_id, config_path);
    if (!comm_manager->initialize()) {
        std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–≤'—è–∑–∫—É!" << std::endl;
        return false;
    }

    // 4. UWBManager
    uwb_manager = std::make_unique<UWBManager>(my_id);
    if (!uwb_manager->Initialize()) {
        std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó UWB!" << std::endl;
        return false;
    }

    // 5. MeshProtocol
    mesh_protocol = std::make_unique<MeshNetwork::SwarmMeshProtocol>(my_id);
    if (!mesh_protocol->Initialize()) {
        std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Mesh-–º–µ—Ä–µ–∂—ñ!" << std::endl;
        return false;
    }

    // 6. DistributedPositioning
    position_tracker = std::make_unique<DistributedPositioning::DistributedPositionTracker>(
            my_id, mesh_protocol);

    // 7. AutonomousDroneAgent
    drone_agent = std::make_unique<AutonomousDroneAgent>(my_id);
    if (!drone_agent->Initialize(mesh_protocol, position_tracker)) {
        std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞!" << std::endl;
        return false;
    }

    config_watcher = std::make_unique<SwarmSystem::ConfigWatcher>(config_manager, config_path);
    // LoRa configuration handler
    auto lora_handler = std::make_unique<SwarmSystem::LoRaConfigHandler>(comm_manager);
    config_watcher->registerSectionHandler(std::move(lora_handler));

    // UWB configuration handler
    auto uwb_handler = std::make_unique<SwarmSystem::UWBConfigHandler>(uwb_manager);
    config_watcher->registerSectionHandler(std::move(uwb_handler));

    // Security configuration handler
    auto security_handler = std::make_unique<SwarmSystem::SecurityConfigHandler>(crypto_manager);
    config_watcher->registerSectionHandler(std::move(security_handler));

    // Global callback –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –ø–æ–∫—Ä—ã—Ç—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ handlers
    config_watcher->setGlobalChangeCallback([](const std::string& section, const std::string& key,
                                               const std::string& old_val, const std::string& new_val) -> bool {
        std::cout << "üîÑ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " << section << "." << key
                  << " –∏–∑–º–µ–Ω–µ–Ω —Å '" << old_val << "' –Ω–∞ '" << new_val << "'" << std::endl;

        // Handle specific global changes that aren't covered by handlers
        if (section == "communication") {
            std::cout << "üì° –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤—è–∑–∏: " << key << " = " << new_val << std::endl;
            return true; // Assume applied successfully
        }

        if (section == "system" && key == "max_drones_mvp") {
            std::cout << "üö® –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥—Ä–æ–Ω–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã!" << std::endl;
            return false; // Cannot apply without restart
        }

        std::cout << "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " << section << "." << key << std::endl;
        return false;
    });

    // System restart callback –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    config_watcher->setSystemRestartCallback([](const std::string& reason) {
        std::cout << "üö® –¢–†–ï–ë–£–ï–¢–°–Ø –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´: " << reason << std::endl;
        std::cout << "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!" << std::endl;
        std::cout << "   –ù–∞–∂–º–∏—Ç–µ 'r' –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏..." << std::endl;
        // –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    });

    std::cout << "‚úÖ ConfigWatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" << std::endl;
    return true;
}

    std::cout << "‚úÖ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!" << std::endl;
    return true;
}

bool StartAllSystems() {
    std::cout << "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º..." << std::endl;

    if (!comm_manager->start()) {
        std::cerr << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–≤'—è–∑–æ–∫!" << std::endl;
        return false;
    }

    if (!uwb_manager->Start()) {
        std::cerr << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ UWB!" << std::endl;
        return false;
    }

    if (!mesh_protocol->Start()) {
        std::cerr << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ Mesh!" << std::endl;
        return false;
    }

    if (!drone_agent->Start()) {
        std::cerr << "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≥–µ–Ω—Ç!" << std::endl;
        return false;
    }

    std::cout << "‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!" << std::endl;
    return true;
}

void StopAllSystems() {
    std::cout << "üõë –ó—É–ø–∏–Ω–∫–∞ —Å–∏—Å—Ç–µ–º..." << std::endl;

    if (drone_agent) drone_agent->Stop();
    if (mesh_protocol) mesh_protocol->Stop();
    if (uwb_manager) uwb_manager->Stop();
    if (comm_manager) comm_manager->stop();

    std::cout << "‚úÖ –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –∑—É–ø–∏–Ω–µ–Ω—ñ" << std::endl;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
void PrintDroneStatus() {
    std::cout << "\n=== –°–¢–ê–ù –î–†–û–ù–ê ===" << std::endl;
    std::cout << "üöÅ ID: " << my_id << std::endl;

    if (comm_manager) {
        std::cout << "üì° RSSI: " << static_cast<int>(comm_manager->get_current_rssi()) << " dBm" << std::endl;
        std::cout << "üîó –Ø–∫—ñ—Å—Ç—å: " << static_cast<int>(comm_manager->get_link_quality() * 100) << "%" << std::endl;
    }

    if (mesh_protocol) {
        auto stats = mesh_protocol->GetNetworkStats();
        std::cout << "üï∏Ô∏è Mesh: " << stats.packets_sent << "/" << stats.packets_received << " –ø–∞–∫–µ—Ç—ñ–≤" << std::endl;
    }

    if (drone_agent) {
        auto state = drone_agent->GetMissionState();
        std::cout << "ü§ñ –°—Ç–∞–Ω: " << static_cast<int>(state) << std::endl;
    }
}

void PrintHelp() {
    std::cout << R"(
–î–û–°–¢–£–ü–ù–Ü –ö–û–ú–ê–ù–î–ò:
  h, help         - –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≤—ñ–¥–∫—É
  s, status       - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω –¥—Ä–æ–Ω–∞
  q, quit, exit   - –í–∏—Ö—ñ–¥
  emergency       - –ê–í–ê–†–Ü–ô–ù–ê –ó–£–ü–ò–ù–ö–ê
  test_mesh       - –¢–µ—Å—Ç mesh-–∑–≤'—è–∑–∫—É
)" << std::endl;
}

void processDistributedCommands() {
    // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if (mesh_protocol && mesh_protocol->HasPendingCommands()) {
        auto commands = mesh_protocol->GetPendingCommands();

        for (const auto& command : commands) {
            if (autonomous_agent) {
                bool success = autonomous_agent->ProcessDistributedCommand(command);

                if (success) {
                    std::cout << "‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: —Ç–∏–ø "
                              << command.command_type << " –æ—Ç –¥—Ä–æ–Ω–∞ " << command.originator_id << std::endl;
                } else {
                    std::cout << "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¥—Ä–æ–Ω–∞ " << command.originator_id << std::endl;
                }
            }
        }

        // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        mesh_protocol->ClearProcessedCommands();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç ground station —á–µ—Ä–µ–∑ LoRa
    if (comm_manager && comm_manager->has_incoming_messages()) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –Ω–∞–∑–µ–º–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
        processGroundStationCommands();
    }
}

void processGroundStationCommands() {
    // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç ground station
    while (comm_manager->has_incoming_messages()) {
        SwarmControl::SwarmMessage message;
        if (comm_manager->get_next_message(message)) {

            switch (message.type) {
                case SwarmControl::MessageType::COMMAND:
                    handleGroundStationCommand(message);
                    break;

                case SwarmControl::MessageType::FORMATION_UPDATE:
                    handleFormationUpdate(message);
                    break;

                case SwarmControl::MessageType::MISSION_UPDATE:
                    handleMissionUpdate(message);
                    break;

                case SwarmControl::MessageType::EMERGENCY:
                    handleEmergencyCommand(message);
                    break;

                default:
                    // –ü–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è mesh –ø—Ä–æ—Ç–æ–∫–æ–ª—É
                    if (mesh_protocol) {
                        mesh_protocol->ProcessExternalMessage(message);
                    }
                    break;
            }
        }
    }
}

void handleGroundStationCommand(const SwarmControl::SwarmMessage& message) {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ payload
    if (message.payload.size() >= sizeof(DistributedCommand)) {
        DistributedCommand command;
        std::memcpy(&command, message.payload.data(), sizeof(DistributedCommand));

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        if (autonomous_agent) {
            autonomous_agent->ProcessDistributedCommand(command);
        }

        std::cout << "üì° –ö–æ–º–∞–Ω–¥–∞ –æ—Ç ground station –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" << std::endl;
    }
}

int main(int argc, char* argv[]) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    if (argc < 2) {
        std::cerr << "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: " << argv[0] << " <drone_id> [config_path]" << std::endl;
        std::cerr << "–ü—Ä–∏–∫–ª–∞–¥: " << argv[0] << " 0201 ./config/swarm_config.yaml" << std::endl;
        return 1;
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤
    signal(SIGINT, SignalHandler);
    signal(SIGTERM, SignalHandler);

    PrintBanner();

    // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    my_id = static_cast<DroneID>(std::stoul(argv[1]));
    config_path = (argc > 2) ? argv[2] : "./config/swarm_config.yaml";

    if (!VALIDATE_DRONE_ID(my_id)) {
        std::cerr << "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID –¥—Ä–æ–Ω–∞: " << my_id << std::endl;
        return 1;
    }

    std::cout << "üöÅ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞ ID: " << my_id << std::endl;
    std::cout << "üìÅ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: " << config_path << std::endl;

    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        if (!InitializeAllSystems()) {
            std::cerr << "‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É!" << std::endl;
            return 1;
        }

        // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        if (!StartAllSystems()) {
            std::cerr << "‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É!" << std::endl;
            StopAllSystems();
            return 1;
        }

        std::cout << "\n‚úÖ –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—î–º –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!" << std::endl;
        std::cout << "üì° Mesh-–º–µ—Ä–µ–∂–∞ –∞–∫—Ç–∏–≤–Ω–∞" << std::endl;
        std::cout << "üó∫Ô∏è –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–µ" << std::endl;
        std::cout << "ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏–π" << std::endl;

        PrintHelp();

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        std::string command;
        while (!g_shutdown_requested) {
            std::cout << "\nmesh[" << my_id << "]> ";

            if (!std::getline(std::cin, command)) {
                break;
            }

            if (command.empty()) continue;

            std::istringstream iss(command);
            std::string cmd;
            iss >> cmd;

            if (cmd == "h" || cmd == "help") {
                PrintHelp();
            }
            else if (cmd == "s" || cmd == "status") {
                PrintDroneStatus();
            }
            else if (cmd == "test_mesh") {
                if (mesh_protocol) {
                    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç mesh
                    std::vector<uint8_t> test_data = {'T', 'E', 'S', 'T'};
                    if (mesh_protocol->BroadcastMessage(test_data, 128)) {
                        std::cout << "‚úÖ –¢–µ—Å—Ç mesh-–∑–≤'—è–∑–∫—É —É—Å–ø—ñ—à–Ω–∏–π" << std::endl;
                    } else {
                        std::cout << "‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ mesh-–∑–≤'—è–∑–∫–æ–º" << std::endl;
                    }
                }
            }
            else if (cmd == "emergency") {
                std::cout << "üö® –ê–í–ê–†–Ü–ô–ù–ê –ó–£–ü–ò–ù–ö–ê!" << std::endl;
                break;
            }
            else if (cmd == "q" || cmd == "quit" || cmd == "exit") {
                std::cout << "–í–∏—Ö—ñ–¥..." << std::endl;
                break;
            }
            else {
                std::cout << "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: " << cmd << std::endl;
                std::cout << "–í–≤–µ–¥—ñ—Ç—å 'help' –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥" << std::endl;
            }
        }

        // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        std::cout << "\n‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏..." << std::endl;
        StopAllSystems();

    } catch (const std::exception& e) {
        std::cerr << "üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: " << e.what() << std::endl;
        StopAllSystems();
        return 1;
    }

    std::cout << "\n‚úÖ –†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ" << std::endl;


    return 0;
}