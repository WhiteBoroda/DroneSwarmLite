#include "../include/MeshProtocol.h"
#include "../include/SwarmManager.h"
#include <algorithm>
#include <random>
#include <cstring>
#include <iostream>

namespace MeshNetwork {

    MeshProtocol::MeshProtocol(DroneID my_id) : my_id_(my_id) {
        last_hello_time_ = 0;
        last_route_cleanup_ = 0;
        last_neighbor_discovery_ = 0;

        // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        memset(&stats_, 0, sizeof(stats_));

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
        std::random_device rd;
        sequence_generator_.seed(rd());
    }

    bool MeshProtocol::Initialize() {
        std::cout << "üì° –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª—É –¥–ª—è –¥—Ä–æ–Ω–∞ " << my_id_ << std::endl;

        // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        neighbors_.clear();
        routing_table_.clear();
        seen_sequences_.clear();
        pending_acks_.clear();

        // –û—á–∏—â–µ–Ω–Ω—è —á–µ—Ä–≥
        while (!outgoing_queue_.empty()) outgoing_queue_.pop();
        while (!forwarding_queue_.empty()) forwarding_queue_.pop();

        std::cout << "‚úÖ Mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ" << std::endl;
        return true;
    }

    bool MeshProtocol::Start() {
        std::cout << "üöÄ –ó–∞–ø—É—Å–∫ Mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª—É..." << std::endl;

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π HELLO
        SendHelloMessage();

        std::cout << "‚úÖ Mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª –∑–∞–ø—É—â–µ–Ω–æ" << std::endl;
        return true;
    }

    void MeshProtocol::Update() {
        uint32_t current_time = millis();

        // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö HELLO (–∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥)
        if (current_time - last_hello_time_ > 5000) {
            SendHelloMessage();
            last_hello_time_ = current_time;
        }

        // –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ (–∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥)
        if (current_time - last_route_cleanup_ > 30000) {
            CleanupExpiredRoutes();
            last_route_cleanup_ = current_time;
        }

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ—Ä—Ç–≤–∏—Ö —Å—É—Å—ñ–¥—ñ–≤ (–∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥)
        if (current_time - last_neighbor_discovery_ > 10000) {
            RemoveDeadNeighbors();
            last_neighbor_discovery_ = current_time;
        }

        // –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        ProcessOutgoingQueue();
        ProcessForwardingQueue();
    }

    bool MeshProtocol::Stop() {
        std::cout << "‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ Mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª—É..." << std::endl;

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è
        SendGoodbyeMessage();

        // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–∏—Ö
        neighbors_.clear();
        routing_table_.clear();
        seen_sequences_.clear();
        pending_acks_.clear();

        std::cout << "‚úÖ Mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª –∑—É–ø–∏–Ω–µ–Ω–æ" << std::endl;
        return true;
    }

    bool MeshProtocol::SendMessage(DroneID destination, const std::vector<uint8_t>& data, uint8_t priority) {
        if (data.size() > 512) {
            std::cerr << "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ: " << data.size() << " –±–∞–π—Ç" << std::endl;
            return false;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ mesh-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        MeshMessage message;
        message.header.message_type = MESH_DATA;
        message.header.source_id = my_id_;
        message.header.destination_id = destination;
        message.header.sequence_number = GenerateSequenceNumber();
        message.header.timestamp = millis();
        message.header.priority = priority;
        message.header.flags = FLAG_ACK_REQUIRED;
        message.header.payload_size = data.size();
        message.header.hop_count = 0;
        message.header.max_hops = 10;

        // –ö–æ–ø—ñ—é—î–º–æ –¥–∞–Ω—ñ
        std::copy(data.begin(), data.end(), message.payload);

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞—Ä—à—Ä—É—Ç
        if (destination == 0) {
            // Broadcast
            return BroadcastMessage(data, priority);
        } else {
            // Unicast - –∑–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞—Ä—à—Ä—É—Ç
            auto route_it = routing_table_.find(destination);
            if (route_it != routing_table_.end()) {
                message.header.next_hop = route_it->second.next_hop;
                return TransmitMessage(message);
            } else {
                // –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—à—É–∫
                std::cout << "üîç –ü–æ—à—É–∫ –º–∞—Ä—à—Ä—É—Ç—É –¥–æ –¥—Ä–æ–Ω–∞ " << destination << std::endl;
                SendRouteRequest(destination);

                // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É –Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ
                outgoing_queue_.push(message);
                return true;
            }
        }
    }

    bool MeshProtocol::BroadcastMessage(const std::vector<uint8_t>& data, uint8_t priority) {
        MeshMessage message;
        message.header.message_type = MESH_DATA;
        message.header.source_id = my_id_;
        message.header.destination_id = 0; // Broadcast
        message.header.sequence_number = GenerateSequenceNumber();
        message.header.timestamp = millis();
        message.header.priority = priority;
        message.header.flags = FLAG_BROADCAST;
        message.header.payload_size = data.size();
        message.header.hop_count = 0;
        message.header.max_hops = 5; // –ú–µ–Ω—à–µ hop'—ñ–≤ –¥–ª—è broadcast

        std::copy(data.begin(), data.end(), message.payload);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ–º —Å—É—Å—ñ–¥–∞–º
        bool success = false;
        for (const auto& [neighbor_id, neighbor_info] : neighbors_) {
            if (neighbor_info.is_reliable) {
                message.header.next_hop = neighbor_id;
                if (TransmitMessage(message)) {
                    success = true;
                }
            }
        }

        stats_.packets_sent++;
        return success;
    }

    bool MeshProtocol::SendEmergencyMessage(const std::vector<uint8_t>& data) {
        MeshMessage message;
        message.header.message_type = MESH_EMERGENCY;
        message.header.source_id = my_id_;
        message.header.destination_id = 0; // Broadcast
        message.header.sequence_number = GenerateSequenceNumber();
        message.header.timestamp = millis();
        message.header.priority = 0; // –ù–∞–π–≤–∏—â–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
        message.header.flags = FLAG_EMERGENCY | FLAG_BROADCAST;
        message.header.payload_size = data.size();
        message.header.hop_count = 0;
        message.header.max_hops = 15; // –ë—ñ–ª—å—à–µ hop'—ñ–≤ –¥–ª—è –∞–≤–∞—Ä—ñ–π–Ω–∏—Ö

        std::copy(data.begin(), data.end(), message.payload);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –í–°–Ü–ú —Å—É—Å—ñ–¥–∞–º –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
        bool success = false;
        for (const auto& [neighbor_id, neighbor_info] : neighbors_) {
            message.header.next_hop = neighbor_id;
            if (TransmitMessage(message)) {
                success = true;
            }
        }

        std::cout << "üö® –ê–≤–∞—Ä—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑—ñ—Å–ª–∞–Ω–µ —á–µ—Ä–µ–∑ mesh" << std::endl;
        return success;
    }

    void MeshProtocol::ProcessIncomingMessage(const MeshMessage& message) {
        stats_.packets_received++;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        if (IsSequenceSeen(message.header.sequence_number)) {
            std::cout << "‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ " << message.header.source_id << std::endl;
            return;
        }
        MarkSequenceSeen(message.header.sequence_number);

        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—É—Å—ñ–¥–∞
        UpdateNeighborFromMessage(message);

        // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
        switch (message.header.message_type) {
            case MESH_HELLO:
                ProcessHelloMessage(message);
                break;

            case MESH_ROUTE_REQUEST:
                ProcessRouteRequest(message);
                break;

            case MESH_ROUTE_REPLY:
                ProcessRouteReply(message);
                break;

            case MESH_DATA:
                ProcessDataMessage(message);
                break;

            case MESH_ACK:
                ProcessAckMessage(message);
                break;

            case MESH_ROUTE_ERROR:
                ProcessRouteError(message);
                break;

            case MESH_HEARTBEAT:
                ProcessHeartbeat(message);
                break;

            case MESH_EMERGENCY:
                ProcessEmergencyMessage(message);
                break;

            default:
                std::cout << "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø mesh-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "
                          << static_cast<int>(message.header.message_type) << std::endl;
                break;
        }
    }

    void MeshProtocol::ProcessHelloMessage(const MeshMessage& message) {
        std::cout << "üëã HELLO –≤—ñ–¥ –¥—Ä–æ–Ω–∞ " << message.header.source_id << std::endl;

        // –û–Ω–æ–≤–ª—é—î–º–æ –∞–±–æ –¥–æ–¥–∞—î–º–æ —Å—É—Å—ñ–¥–∞
        NeighborInfo neighbor;
        neighbor.id = message.header.source_id;
        neighbor.last_seen = millis();
        neighbor.rssi = -60; // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π RSSI
        neighbor.is_reliable = true;
        neighbor.hop_count = 1; // –ü—Ä—è–º–∏–π —Å—É—Å—ñ–¥

        neighbors_[message.header.source_id] = neighbor;

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ HELLO —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫—â–æ —Ü–µ –Ω–æ–≤–∏–π —Å—É—Å—ñ–¥
        if (neighbors_.find(message.header.source_id) == neighbors_.end()) {
            SendHelloMessage();
        }
    }

    void MeshProtocol::ProcessRouteRequest(const MeshMessage& message) {
        DroneID destination = *reinterpret_cast<const DroneID*>(message.payload);

        std::cout << "üîç ROUTE_REQUEST –≤—ñ–¥ " << message.header.source_id
                  << " –¥–æ " << destination << std::endl;

        if (destination == my_id_) {
            // –¶–µ –∑–∞–ø–∏—Ç –¥–æ –º–µ–Ω–µ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            SendRouteReply(destination, message.header.source_id);
        } else {
            // –§–æ—Ä–≤–∞—Ä–¥–∏–º–æ –∑–∞–ø–∏—Ç –¥–∞–ª—ñ (—è–∫—â–æ TTL –¥–æ–∑–≤–æ–ª—è—î)
            if (ShouldForwardMessage(message)) {
                ForwardMessage(message);
            }
        }
    }

    void MeshProtocol::ProcessRouteReply(const MeshMessage& message) {
        std::cout << "‚úÖ ROUTE_REPLY –≤—ñ–¥ " << message.header.source_id << std::endl;

        // –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –º–∞—Ä—à—Ä—É—Ç
        RouteEntry route;
        route.destination = message.header.source_id;
        route.next_hop = message.header.previous_hop;
        route.hop_count = message.header.hop_count;
        route.expiry_time = millis() + 300000; // 5 —Ö–≤–∏–ª–∏–Ω
        route.link_quality = CalculateLinkQuality(neighbors_[route.next_hop]);

        routing_table_[route.destination] = route;

        std::cout << "üìä –ú–∞—Ä—à—Ä—É—Ç –¥–æ " << route.destination
                  << " —á–µ—Ä–µ–∑ " << route.next_hop
                  << " (" << static_cast<int>(route.hop_count) << " hops)" << std::endl;
    }

    void MeshProtocol::ProcessDataMessage(const MeshMessage& message) {
        if (message.header.destination_id == my_id_ || message.header.destination_id == 0) {
            // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–µ–Ω–µ
            std::cout << "üì® –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤—ñ–¥ " << message.header.source_id
                      << " (" << message.header.payload_size << " –±–∞–π—Ç)" << std::endl;

            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ACK —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (message.header.flags & FLAG_ACK_REQUIRED) {
                SendAckMessage(message.header.source_id, message.header.sequence_number);
            }

            // –ü–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –¥–æ–¥–∞—Ç–æ–∫
            std::vector<uint8_t> data(message.payload,
                                      message.payload + message.header.payload_size);
            OnDataReceived(message.header.source_id, data);

        } else {
            // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –¥–ª—è –º–µ–Ω–µ - —Ñ–æ—Ä–≤–∞—Ä–¥–∏–º–æ
            if (ShouldForwardMessage(message)) {
                ForwardMessage(message);
            }
        }
    }

    void MeshProtocol::ProcessEmergencyMessage(const MeshMessage& message) {
        std::cout << "üö® –ê–í–ê–†–Ü–ô–ù–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ " << message.header.source_id << std::endl;

        // –ê–≤–∞—Ä—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î–º–æ –∑ –Ω–∞–π–≤–∏—â–∏–º –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
        std::vector<uint8_t> data(message.payload,
                                  message.payload + message.header.payload_size);
        OnEmergencyReceived(message.header.source_id, data);

        // –§–æ—Ä–≤–∞—Ä–¥–∏–º–æ –∞–≤–∞—Ä—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–∞–ª—ñ
        if (message.header.hop_count < message.header.max_hops) {
            ForwardMessage(message);
        }
    }

    void MeshProtocol::SendHelloMessage() {
        MeshMessage hello;
        hello.header.message_type = MESH_HELLO;
        hello.header.source_id = my_id_;
        hello.header.destination_id = 0; // Broadcast
        hello.header.sequence_number = GenerateSequenceNumber();
        hello.header.timestamp = millis();
        hello.header.flags = FLAG_BROADCAST;
        hello.header.hop_count = 0;
        hello.header.max_hops = 1; // HELLO —Ç—ñ–ª—å–∫–∏ –ø—Ä—è–º–∏–º —Å—É—Å—ñ–¥–∞–º

        // –í payload –º–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        hello.header.payload_size = 0;

        // Broadcast –¥–æ –≤—Å—ñ—Ö
        BroadcastToNeighbors(hello);

        std::cout << "üëã HELLO –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—É—Å—ñ–¥–∞–º" << std::endl;
    }

    void MeshProtocol::SendRouteRequest(DroneID destination) {
        MeshMessage request;
        request.header.message_type = MESH_ROUTE_REQUEST;
        request.header.source_id = my_id_;
        request.header.destination_id = 0; // Broadcast
        request.header.sequence_number = GenerateSequenceNumber();
        request.header.timestamp = millis();
        request.header.flags = FLAG_ROUTE_DISCOVERY;
        request.header.hop_count = 0;
        request.header.max_hops = 10;

        // –í payload –≤–∫–∞–∑—É—î–º–æ –∫–æ–≥–æ —à—É–∫–∞—î–º–æ
        *reinterpret_cast<DroneID*>(request.payload) = destination;
        request.header.payload_size = sizeof(DroneID);

        BroadcastToNeighbors(request);

        stats_.route_discoveries++;
        std::cout << "üîç ROUTE_REQUEST –¥–ª—è " << destination << " –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ" << std::endl;
    }

    void MeshProtocol::SendRouteReply(DroneID destination, DroneID requester) {
        MeshMessage reply;
        reply.header.message_type = MESH_ROUTE_REPLY;
        reply.header.source_id = my_id_;
        reply.header.destination_id = requester;
        reply.header.sequence_number = GenerateSequenceNumber();
        reply.header.timestamp = millis();
        reply.header.hop_count = 0;
        reply.header.max_hops = 10;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞—Ä—à—Ä—É—Ç –Ω–∞–∑–∞–¥ –¥–æ requester
        auto route_it = routing_table_.find(requester);
        if (route_it != routing_table_.end()) {
            reply.header.next_hop = route_it->second.next_hop;
            TransmitMessage(reply);

            std::cout << "‚úÖ ROUTE_REPLY –¥–ª—è " << requester << " –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ" << std::endl;
        }
    }

    bool MeshProtocol::ShouldForwardMessage(const MeshMessage& message) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TTL
        if (message.header.hop_count >= message.header.max_hops) {
            return false;
        }

        // –ù–µ —Ñ–æ—Ä–≤–∞—Ä–¥–∏–º–æ –≤–ª–∞—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (message.header.source_id == my_id_) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
        if (IsSequenceSeen(message.header.sequence_number)) {
            return false;
        }

        return true;
    }

    void MeshProtocol::ForwardMessage(const MeshMessage& original_message) {
        MeshMessage forwarded = original_message;
        forwarded.header.hop_count++;
        forwarded.header.previous_hop = my_id_;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π hop
        if (forwarded.header.destination_id != 0) {
            // Unicast - –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç
            DroneID next_hop = SelectBestNextHop(forwarded.header.destination_id);
            if (next_hop != 0) {
                forwarded.header.next_hop = next_hop;
                TransmitMessage(forwarded);
                stats_.packets_forwarded++;
            }
        } else {
            // Broadcast - —Ñ–æ—Ä–≤–∞—Ä–¥–∏–º–æ –≤—Å—ñ–º —Å—É—Å—ñ–¥–∞–º –∫—Ä—ñ–º —Ç–æ–≥–æ, –≤—ñ–¥ –∫–æ–≥–æ –æ—Ç—Ä–∏–º–∞–ª–∏
            for (const auto& [neighbor_id, neighbor_info] : neighbors_) {
                if (neighbor_id != original_message.header.previous_hop &&
                    neighbor_info.is_reliable) {
                    forwarded.header.next_hop = neighbor_id;
                    TransmitMessage(forwarded);
                }
            }
            stats_.packets_forwarded++;
        }

        std::cout << "üîÑ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–ª–∞–Ω–æ (hop "
                  << static_cast<int>(forwarded.header.hop_count) << ")" << std::endl;
    }

    DroneID MeshProtocol::SelectBestNextHop(DroneID destination) {
        auto route_it = routing_table_.find(destination);
        if (route_it != routing_table_.end() &&
            route_it->second.expiry_time > millis()) {
            return route_it->second.next_hop;
        }

        // –ù–µ–º–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É - –≤–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Å—É—Å—ñ–¥–∞
        DroneID best_neighbor = 0;
        double best_quality = -1.0;

        for (const auto& [neighbor_id, neighbor_info] : neighbors_) {
            if (neighbor_info.is_reliable) {
                double quality = CalculateLinkQuality(neighbor_info);
                if (quality > best_quality) {
                    best_quality = quality;
                    best_neighbor = neighbor_id;
                }
            }
        }

        return best_neighbor;
    }

    double MeshProtocol::CalculateLinkQuality(const NeighborInfo& neighbor) {
        // –ö–æ–º–±—ñ–Ω—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏ —è–∫–æ—Å—Ç—ñ –∑–≤'—è–∑–∫—É
        double rssi_factor = (neighbor.rssi + 120.0) / 70.0; // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ -120 –¥–æ -50
        double age_factor = 1.0 - std::min(1.0, (millis() - neighbor.last_seen) / 30000.0);
        double reliability_factor = neighbor.is_reliable ? 1.0 : 0.1;
        double loss_factor = 1.0 - (neighbor.packet_loss / 100.0);

        return (rssi_factor * 0.4 + age_factor * 0.2 +
                reliability_factor * 0.2 + loss_factor * 0.2);
    }

    uint32_t MeshProtocol::GenerateSequenceNumber() {
        static uint32_t sequence = 0;
        return ++sequence;
    }

    bool MeshProtocol::IsSequenceSeen(uint32_t sequence) {
        return seen_sequences_.find(sequence) != seen_sequences_.end();
    }

    void MeshProtocol::MarkSequenceSeen(uint32_t sequence) {
        seen_sequences_.insert(sequence);

        // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–µ—à—É
        if (seen_sequences_.size() > 10000) {
            // –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –∑–∞–ø–∏—Å–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
            seen_sequences_.clear();
        }
    }

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó)
    bool MeshProtocol::TransmitMessage(const MeshMessage& message) {
        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ —á–µ—Ä–µ–∑ LoRa
        std::cout << "üì° TX mesh: " << static_cast<int>(message.header.message_type)
                  << " –≤—ñ–¥ " << message.header.source_id
                  << " –¥–æ " << message.header.next_hop << std::endl;
        return true;
    }

    void MeshProtocol::BroadcastToNeighbors(const MeshMessage& message) {
        for (const auto& [neighbor_id, neighbor_info] : neighbors_) {
            if (neighbor_info.is_reliable) {
                MeshMessage msg_copy = message;
                msg_copy.header.next_hop = neighbor_id;
                TransmitMessage(msg_copy);
            }
        }
    }

    uint32_t MeshProtocol::millis() {
        return std::chrono::duration_cast<std::chrono::milliseconds>(
                std::chrono::system_clock::now().time_since_epoch()).count();
    }

} // namespace MeshNetwork