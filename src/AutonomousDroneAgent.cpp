#include "../include/AutonomousDroneAgent.h"
#include "../include/SwarmTypes.h"
#include <algorithm>
#include <cmath>
#include <iostream>

namespace SwarmSystem {

    AutonomousDroneAgent::AutonomousDroneAgent(DroneID id)
        : my_id_(id)
        , mission_state_(MissionState::IDLE)
        , current_waypoint_index_(0)
        , flight_controller_(nullptr)
        , target_detector_(nullptr)
        , mesh_protocol_(nullptr)
        , comm_manager_(nullptr)
        , last_movement_command_(std::chrono::steady_clock::now())
        , last_target_check_(std::chrono::steady_clock::now())
        , last_status_broadcast_(std::chrono::steady_clock::now())
        , movement_timeout_(std::chrono::seconds(30))
        , target_check_interval_(std::chrono::milliseconds(500))
        , status_broadcast_interval_(std::chrono::seconds(5))
        , max_velocity_(15.0) // 15 –º/—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        , approach_threshold_(2.0) // 2 –º–µ—Ç—Ä–∞ - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ç–æ—á–∫–∏
        , emergency_altitude_(50.0) // 50–º - –∞–≤–∞—Ä–∏–π–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        , last_position_update_(std::chrono::steady_clock::now()) {

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
        current_state_.id = my_id_;
        current_state_.role = DroneRole::AUTONOMOUS;
        current_state_.is_autonomous = true;
        current_state_.can_lead = true;
        current_state_.is_healthy = true;
        current_state_.position = Position3D(0, 0, 0);
        current_state_.velocity = Velocity3D(0, 0, 0);
        current_state_.battery_level = 100;
        current_state_.comm_status = CommunicationStatus::CONNECTED;

        std::cout << "ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥—Ä–æ–Ω–∞ " << my_id_ << std::endl;
    }

    bool AutonomousDroneAgent::Initialize() {
        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥—Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–Ω–æ–º—ñ—ó
            obstacle_avoidance_ = std::make_shared<ObstacleAvoidance>();
            if (!obstacle_avoidance_->Initialize()) {
                std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—à–∫–æ–¥" << std::endl;
                return false;
            }
            navigator_ = std::make_shared<DeadReckoningNavigator>();
            if (!navigator_->Initialize(Position3D(0, 0, 0))) {
                std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞–≤—ñ–≥–∞—Ç–æ—Ä–∞" << std::endl;
                return false;
            }
            local_map_ = std::make_shared<LocalEnvironmentMap>();
            if (!local_map_->Initialize()) {
                std::cerr << "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª–æ–∫–∞–ª—å–Ω–æ—ó –∫–∞—Ä—Ç–∏" << std::endl;
                return false;
            }

            mission_state_ = MissionState::IDLE;
            current_waypoint_index_ = 0;
            planned_waypoints_.clear();

            std::cout << "‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç –¥—Ä–æ–Ω–∞ " << my_id_ << " —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π" << std::endl;
            return true;

        } catch (const std::exception& e) {
            std::cerr << "‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞: " << e.what() << std::endl;
            return false;
        }
    }

    bool AutonomousDroneAgent::Start() {
        if (mission_state_ != MissionState::IDLE) {
            std::cout << "‚ö†Ô∏è –ê–≥–µ–Ω—Ç –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π" << std::endl;
            return true;
        }

        mission_state_ = MissionState::SELF_SUFFICIENT;

        // –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        autonomy_thread_ = std::make_unique<std::thread>(&AutonomousDroneAgent::AutonomyLoop, this);

        std::cout << "üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç –¥—Ä–æ–Ω–∞ " << my_id_ << " –∑–∞–ø—É—â–µ–Ω–∏–π" << std::endl;
        return true;
    }

    void AutonomousDroneAgent::Stop() {
        if (mission_state_ == MissionState::IDLE) {
            return;
        }

        mission_state_ = MissionState::IDLE;

        if (autonomy_thread_ && autonomy_thread_->joinable()) {
            autonomy_thread_->join();
        }

        std::cout << "‚èπÔ∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∏–π –∞–≥–µ–Ω—Ç –¥—Ä–æ–Ω–∞ " << my_id_ << " –∑—É–ø–∏–Ω–µ–Ω–∏–π" << std::endl;
    }

    bool AutonomousDroneAgent::ProcessDistributedCommand(const DistributedCommand& command) {
        std::cout << "üìã –û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∏–ø—É " << command.command_type
                  << " –≤—ñ–¥ –¥—Ä–æ–Ω–∞ " << command.originator_id << std::endl;

        if (!ValidateCommand(command)) {
            std::cout << "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é" << std::endl;
            return false;
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É —è–∫ –ø–æ—Ç–æ—á–Ω—É –º—ñ—Å—ñ—é
        current_mission_ = command;
        mission_state_ = MissionState::EXECUTING_COMMAND;

        // –ü–ª–∞–Ω—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫–æ–º–∞–Ω–¥–∏
        bool success = false;
        switch (command.command_type) {
            case DistributedCommand::MOVE_TO_WAYPOINT:
                success = PlanWaypointMission(command.target_position);
                break;

            case DistributedCommand::SEARCH_PATTERN:
                success = PlanSearchMission(command.area_center, command.search_pattern_width,
                                            command.search_pattern_height);
                break;

            case DistributedCommand::LOITER_AREA:
                success = PlanLoiterMission(command.area_center, command.area_radius);
                break;

            case DistributedCommand::ATTACK_TARGET:
                success = PlanAttackMission(command.target_position);
                break;

            case DistributedCommand::CHANGE_FORMATION:
                success = PlanFormationChange(command.formation_type);
                break;

            case DistributedCommand::EMERGENCY_STOP:
                success = InitiateEmergencyStop();
                break;

            case DistributedCommand::AUTONOMOUS_MODE:
                success = EnableFullAutonomy();
                break;

            case DistributedCommand::RETURN_TO_BASE:
                success = PlanReturnToBase(command.target_position);
                break;

            case DistributedCommand::ORBIT_TARGET:
                success = PlanOrbitMission(command.target_position, command.area_radius);
                break;

            default:
                std::cout << "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥–∏: " << command.command_type << std::endl;
                success = false;
                break;
        }
        if (success) {
            LogMissionStart(command);
            BroadcastStatusUpdate();
        } else {
            mission_state_ = MissionState::IDLE;
        }

        return success;
    }

    bool AutonomousDroneAgent::ExecuteCurrentMission() {
        if (mission_state_ == MissionState::IDLE) {
            return true; // –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –º—ñ—Å—ñ—ó
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —Ç–∞ –∫–∞—Ä—Ç–∏
        UpdateNavigationState();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤–∞—Ä—ñ–π–Ω—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó
        if (!CheckSafetyConditions()) {
            return HandleEmergencyCondition();
        }

        // –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º—ñ—Å—ñ—é
        bool mission_result = false;
        switch (current_mission_.command_type) {
            case DistributedCommand::MOVE_TO_WAYPOINT:
                mission_result = ExecuteWaypointMission();
                break;

            case DistributedCommand::SEARCH_PATTERN:
                mission_result = ExecuteSearchMission();
                break;

            case DistributedCommand::LOITER_AREA:
                mission_result = ExecuteLoiterMission();
                break;

            case DistributedCommand::ATTACK_TARGET:
                mission_result = ExecuteAttackMission();
                break;

            case DistributedCommand::ORBIT_TARGET:
                mission_result = ExecuteOrbitMission();
                break;

            case DistributedCommand::RETURN_TO_BASE:
                mission_result = ExecuteReturnToBaseMission();
                break;

            default:
                mission_result = ExecuteDefaultBehavior();
                break;
        }

        // –ï—Å–ª–∏ –º–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (!mission_result && mission_state_ != MissionState::EMERGENCY) {
            return InitiateAutonomousPatrol();
        }

        return mission_result;
    }


    bool AutonomousDroneAgent::PlanTrajectoryToTarget(const Position3D& target) {
        if (!navigator_) {
            std::cerr << "‚ùå –ù–∞–≤—ñ–≥–∞—Ç–æ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π" << std::endl;
            return false;
        }

        Position3D current_pos = navigator_->GetEstimatedPosition();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü—ñ–ª—å –¥–æ—Å—è–∂–Ω–∞
        double distance = SwarmUtils::CalculateDistance(current_pos, target);
        if (distance > 10000.0) { // –ú–∞–∫—Å–∏–º—É–º 10–∫–º
            std::cout << "‚ö†Ô∏è –¶—ñ–ª—å –∑–∞–Ω–∞–¥—Ç–æ –¥–∞–ª–µ–∫–æ: " << distance << " –º–µ—Ç—Ä—ñ–≤" << std::endl;
            return false;
        }

        // –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ—ó —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—ó –∑ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è–º –ø–µ—Ä–µ—à–∫–æ–¥
        if (obstacle_avoidance_) {
            planned_waypoints_ = obstacle_avoidance_->PlanSafePath(current_pos, target);
        } else {
            // –ü—Ä–æ—Å—Ç–∏–π –ø—Ä—è–º–∏–π —à–ª—è—Ö —è–∫—â–æ –Ω–µ–º–∞—î —Å–∏—Å—Ç–µ–º–∏ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è
            planned_waypoints_.clear();
            planned_waypoints_.push_back(current_pos);
            planned_waypoints_.push_back(target);
        }

        current_waypoint_index_ = 0;

        std::cout << "üó∫Ô∏è –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—é –∑ " << planned_waypoints_.size()
                  << " —Ç–æ—á–æ–∫ –¥–æ —Ü—ñ–ª—ñ (" << target.x() << ", " << target.y() << ", " << target.z() << ")" << std::endl;

        return !planned_waypoints_.empty();
    }

    bool AutonomousDroneAgent::AdaptToEnvironment() {
        if (!local_map_ || !obstacle_avoidance_) {
            return true; // –ù–µ–º–∞—î —Å–∏—Å—Ç–µ–º–∏ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—É –∫–∞—Ä—Ç—É –∑ —Å–µ–Ω—Å–æ—Ä—ñ–≤
        local_map_->UpdateFromSensors();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç–æ—á–Ω–∞ —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—è –±–µ–∑–ø–µ—á–Ω–∞
        if (!planned_waypoints_.empty() && current_waypoint_index_ < planned_waypoints_.size()) {
            Position3D current_pos = navigator_->GetEstimatedPosition();
            Position3D next_waypoint = planned_waypoints_[current_waypoint_index_];

            if (!local_map_->IsPathClear(current_pos, next_waypoint)) {
                std::cout << "‚ö†Ô∏è –ü–µ—Ä–µ—à–∫–æ–¥–∞ –Ω–∞ —à–ª—è—Ö—É - –ø–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—ó" << std::endl;

                // –ü–µ—Ä–µ–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –Ω–æ–≤–∏—Ö –ø–µ—Ä–µ—à–∫–æ–¥
                Position3D final_target = planned_waypoints_.back();
                return PlanTrajectoryToTarget(final_target);
            }
        }

        return true;
    }

    bool AutonomousDroneAgent::HandleCommunicationLoss() {
        std::cout << "üì° –í—Ç—Ä–∞—Ç–∞ –∑–≤'—è–∑–∫—É - –ø–µ—Ä–µ—Ö—ñ–¥ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–∏–π —Ä–µ–∂–∏–º" << std::endl;

        mission_state_ = MissionState::SELF_SUFFICIENT;
        current_state_.comm_status = CommunicationStatus::LOST;

        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –º—ñ—Å—ñ—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ
        return ContinueMissionAutonomously();
    }

    bool AutonomousDroneAgent::ContinueMissionAutonomously() {
        std::cout << "ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –º—ñ—Å—ñ—ó" << std::endl;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–æ—ó –º—ñ—Å—ñ—ó - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
        if (current_mission_.command_type == DistributedCommand::MOVE_TO_WAYPOINT &&
            planned_waypoints_.empty()) {

            return InitiateAutonomousPatrol();
        }

        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –º—ñ—Å—ñ—ó
        mission_state_ = MissionState::EXECUTING_COMMAND;
        return true;
    }

    bool AutonomousDroneAgent::CoordinateWithNearbyDrones() {
        std::cout << "ü§ù –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –∑ —Å—É—Å—ñ–¥–Ω—ñ–º–∏ –¥—Ä–æ–Ω–∞–º–∏" << std::endl;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–∏–∂—á–∏—Ö –¥—Ä–æ–Ω—ñ–≤ (—Ç—É—Ç –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ mesh-–º–µ—Ä–µ–∂–µ—é)
        std::vector<DroneID> nearby_drones = GetNearbyDrones();

        if (nearby_drones.empty()) {
            std::cout << "üë§ –ù–µ–º–∞—î –±–ª–∏–∂—á–∏—Ö –¥—Ä–æ–Ω—ñ–≤ - –ø—Ä–∞—Ü—é—é —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ" << std::endl;
            return true;
        }

        // –û–±–º—ñ–Ω—é—î–º–æ—Å—è —Å—Ç–∞—Ç—É—Å–æ–º –∑ –±–ª–∏–∂—á–∏–º–∏ –¥—Ä–æ–Ω–∞–º–∏
        for (DroneID drone_id : nearby_drones) {
            SendStatusToDrone(drone_id);
        }

        // –Ø–∫—â–æ —î –¥—Ä–æ–Ω–∏ –∑ –∫—Ä–∞—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ - —Å–ª—ñ–¥—É—î–º–æ –∑–∞ –Ω–∏–º–∏
        DroneID best_leader = FindBestLocalLeader(nearby_drones);
        if (best_leader != 0 && best_leader != my_id_) {
            std::cout << "üëë –°–ª—ñ–¥—É—é –∑–∞ –ª–æ–∫–∞–ª—å–Ω–∏–º –ª—ñ–¥–µ—Ä–æ–º " << best_leader << std::endl;
            return FollowLocalLeader(best_leader);
        }

        return true;
    }

// –ü—Ä–∏–≤–∞—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó

    bool AutonomousDroneAgent::PlanWaypointMission(const Position3D& target) {
        std::cout << "üéØ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É –¥–æ —Ç–æ—á–∫–∏ (" << target.x() << ", " << target.y()
                  << ", " << target.z() << ")" << std::endl;

        if (!ValidateTargetPosition(target)) {
            return false;
        }

        return PlanTrajectoryToTarget(target);
    }

    bool AutonomousDroneAgent::PlanSearchMission(const Position3D& center, double width, double height) {
        std::cout << "üîç –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É –≤ –∑–æ–Ω—ñ (" << center.x() << ", " << center.y()
                  << ") —Ä–æ–∑–º—ñ—Ä " << width << "x" << height << "–º" << std::endl;

        if (width <= 0 || height <= 0 || width > 5000 || height > 5000) {
            std::cout << "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–Ω–∏ –ø–æ—à—É–∫—É" << std::endl;
            return false;
        }

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ç—Ç–µ—Ä–Ω—É –¥–ª—è –ø–æ—à—É–∫—É (–∑–º—ñ–π–∫–∞)
        planned_waypoints_.clear();

        double search_step = 50.0; // 50–º –º—ñ–∂ –ª—ñ–Ω—ñ—è–º–∏ –ø–æ—à—É–∫—É
        int num_lines = static_cast<int>(width / search_step) + 1;

        for (int i = 0; i < num_lines; ++i) {
            double x_offset = -width/2 + i * search_step;

            if (i % 2 == 0) {
                // –ü—Ä—è–º–∏–π –ø—Ä–æ—Ö—ñ–¥
                planned_waypoints_.emplace_back(center.x() + x_offset, center.y() - height/2, center.z());
                planned_waypoints_.emplace_back(center.x() + x_offset, center.y() + height/2, center.z());
            } else {
                // –ó–≤–æ—Ä–æ—Ç–Ω–∏–π –ø—Ä–æ—Ö—ñ–¥
                planned_waypoints_.emplace_back(center.x() + x_offset, center.y() + height/2, center.z());
                planned_waypoints_.emplace_back(center.x() + x_offset, center.y() - height/2, center.z());
            }
        }

        current_waypoint_index_ = 0;
        mission_state_ = MissionState::EXECUTING_COMMAND;

        std::cout << "üìã –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ " << planned_waypoints_.size() << " —Ç–æ—á–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É" << std::endl;
        return true;
    }

    bool AutonomousDroneAgent::PlanLoiterMission(const Position3D& center, double radius) {
        std::cout << "üîÑ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ (" << center.x() << ", " << center.y()
                  << ") —Ä–∞–¥—ñ—É—Å " << radius << "–º" << std::endl;

        if (radius <= 0 || radius > 2000) {
            std::cout << "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–∞–¥—ñ—É—Å –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è: " << radius << std::endl;
            return false;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä—É–≥–æ–≤—É —Ç—Ä–∞—î–∫—Ç–æ—Ä—ñ—é
        planned_waypoints_.clear();

        int points = std::max(8, static_cast<int>(radius / 25)); // –ú—ñ–Ω—ñ–º—É–º 8 —Ç–æ—á–æ–∫
        points = std::min(points, 32); // –ú–∞–∫—Å–∏–º—É–º 32 —Ç–æ—á–∫–∏

        for (int i = 0; i < points; ++i) {
            double angle = (2.0 * SwarmConstants::PI * i) / points;
            double x = center.x() + radius * cos(angle);
            double y = center.y() + radius * sin(angle);
            planned_waypoints_.emplace_back(x, y, center.z());
        }

        current_waypoint_index_ = 0;
        mission_state_ = MissionState::EXECUTING_COMMAND;

        std::cout << "üìã –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∫—Ä—É–≥–æ–≤–µ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –∑ " << points << " —Ç–æ—á–æ–∫" << std::endl;
        return true;
    }

    bool AutonomousDroneAgent::PlanAttackMission(const Position3D& target) {
        std::cout << "‚öîÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∞—Ç–∞–∫–∏ –Ω–∞ —Ü—ñ–ª—å (" << target.x() << ", " << target.y()
                  << ", " << target.z() << ")" << std::endl;

        // –í –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –∞—Ç–∞–∫–∞ –æ–±–º–µ–∂–µ–Ω–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ —Ü—ñ–ª—ñ
        // –†–µ–∞–ª—å–Ω–∞ –∞—Ç–∞–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        std::cout << "‚ö†Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –∞—Ç–∞–∫–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ - –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ —Ü—ñ–ª—ñ" << std::endl;
        return PlanOrbitMission(target, 100.0); // 100–º –Ω–∞–≤–∫–æ–ª–æ —Ü—ñ–ª—ñ
    }

    bool AutonomousDroneAgent::PlanFormationChange(FormationType new_formation) {
        std::cout << "üìê –ó–º—ñ–Ω–∞ —Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–∞ " << SwarmUtils::FormationTypeToString(new_formation) << std::endl;

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—É—Å—ñ–¥—ñ–≤
        auto nearby_drones = GetNearbyDrones();
        if (nearby_drones.empty()) {
            std::cout << "‚ö†Ô∏è –ù–µ–º–∞—î —Å—É—Å—ñ–¥–Ω—ñ—Ö –¥—Ä–æ–Ω—ñ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ü—ñ—ó" << std::endl;
            return false;
        }

        // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó –≤ –Ω–æ–≤—ñ–π —Ñ–æ—Ä–º–∞—Ü—ñ—ó
        Position3D formation_position = CalculateFormationPosition(new_formation, nearby_drones);

        // –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä—É—Ö—É –¥–æ –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –≤ —Ñ–æ—Ä–º–∞—Ü—ñ—ó
        bool success = PlanWaypointMission(formation_position);

        if (success) {
            current_formation_ = new_formation;
            BroadcastFormationChange(new_formation);
        }

        return success;
    }

    bool AutonomousDroneAgent::InitiateEmergencyStop() {
        std::cout << "üö® –ê–í–ê–†–Ü–ô–ù–ê –ó–£–ü–ò–ù–ö–ê!" << std::endl;

        // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –º—ñ—Å—ñ—ó
        planned_waypoints_.clear();
        current_waypoint_index_ = 0;

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –∑–∞–≤–∏—Å–∞–Ω–Ω—è
        mission_state_ = MissionState::EMERGENCY_MODE;
        current_state_.role = DroneRole::SELF_DESTRUCT;

        return true;
    }

    bool AutonomousDroneAgent::EnableFullAutonomy() {
        std::cout << "ü§ñ –ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–Ω–æ–º—ñ—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞" << std::endl;

        mission_state_ = MissionState::SELF_SUFFICIENT;
        current_state_.is_autonomous = true;
        current_state_.role = DroneRole::AUTONOMOUS;

        // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ—Ç–æ—á–Ω–æ—ó –º—ñ—Å—ñ—ó - –ø–æ—á–∏–Ω–∞—î–º–æ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
        if (planned_waypoints_.empty()) {
            return InitiateAutonomousPatrol();
        }

        return true;
    }

    bool AutonomousDroneAgent::ExecuteWaypointMission() {
        if (planned_waypoints_.empty() || current_waypoint_index_ >= planned_waypoints_.size()) {
            std::cout << "‚úÖ –ú—ñ—Å—ñ—è –∑ waypoint –∑–∞–≤–µ—Ä—à–µ–Ω–∞" << std::endl;
            mission_state_ = MissionState::IDLE;
            return true;
        }

        Position3D current_pos = navigator_->GetEstimatedPosition();
        Position3D target_waypoint = planned_waypoints_[current_waypoint_index_];

        double distance = SwarmUtils::CalculateDistance(current_pos, target_waypoint);

        if (distance < 5.0) { // –î–æ—Å—è–≥–ª–∏ —Ç–æ—á–∫–∏ –∑ —Ç–æ—á–Ω—ñ—Å—Ç—é 5–º
            current_waypoint_index_++;
            std::cout << "‚úÖ –î–æ—Å—è–≥–Ω—É—Ç–æ waypoint " << current_waypoint_index_
                      << " –∑ " << planned_waypoints_.size() << std::endl;

            if (current_waypoint_index_ >= planned_waypoints_.size()) {
                mission_state_ = MissionState::IDLE;
                std::cout << "üéØ –ú—ñ—Å—ñ—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞" << std::endl;
            }
        } else {
            // –†—É—Ö–∞—î–º–æ—Å—è –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–æ—á–∫–∏
            SendMovementCommand(target_waypoint);
        }

        return true;
    }

    bool AutonomousDroneAgent::ExecuteSearchMission() {
        // –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ waypoint, –∞–ª–µ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –Ω–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª–µ–π
        bool waypoint_result = ExecuteWaypointMission();

        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª–µ–π
        CheckForTargets();

        return waypoint_result;
    }

    bool AutonomousDroneAgent::ExecuteLoiterMission() {
        if (planned_waypoints_.empty()) {
            std::cout << "‚ùå –ù–µ–º–∞—î —Ç–æ—á–æ–∫ –¥–ª—è –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è" << std::endl;
            return false;
        }

        // –¶–∏–∫–ª—ñ—á–Ω–µ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
        if (current_waypoint_index_ >= planned_waypoints_.size()) {
            current_waypoint_index_ = 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
            std::cout << "üîÑ –ù–æ–≤–∏–π —Ü–∏–∫–ª –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ" << std::endl;
        }

        return ExecuteWaypointMission();
    }

    bool AutonomousDroneAgent::ExecuteAttackMission() {
        std::cout << "‚öîÔ∏è –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∞—Ç–∞–∫—É–≤–∞–ª—å–Ω–æ—ó –º—ñ—Å—ñ—ó (–æ–±–º–µ–∂–µ–Ω–æ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ)" << std::endl;

        // –í –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –∑–∞–º—ñ—Å—Ç—å –∞—Ç–∞–∫–∏ - –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ —Ü—ñ–ª—ñ
        return ExecuteLoiterMission();
    }

    bool AutonomousDroneAgent::ExecuteDefaultBehavior() {
        std::cout << "ü§ñ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ - –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è" << std::endl;

        if (planned_waypoints_.empty()) {
            return InitiateAutonomousPatrol();
        }

        return ExecuteLoiterMission();
    }

    bool AutonomousDroneAgent::InitiateAutonomousPatrol() {
        std::cout << "üõ°Ô∏è –Ü–Ω—ñ—Ü—ñ–∞—Ü—ñ—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è" << std::endl;

        Position3D current_pos = navigator_->GetEstimatedPosition();

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ç—Ä—É–ª—å–Ω—É –∑–æ–Ω—É –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        return PlanLoiterMission(current_pos, 200.0); // 200–º —Ä–∞–¥—ñ—É—Å
    }

    void AutonomousDroneAgent::UpdateNavigationState() {
        if (!navigator_) {
            return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–µ–Ω—Å–æ—Ä—ñ–≤
        navigator_->UpdatePosition(0.05); // 50–º—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥—Ä–æ–Ω–∞
        current_state_.position = navigator_->GetEstimatedPosition();
        current_state_.velocity = EstimateCurrentVelocity();
        current_state_.last_update = std::chrono::duration_cast<Timestamp>(
                std::chrono::system_clock::now().time_since_epoch());
    }

    void AutonomousDroneAgent::SendMovementCommand(const Position3D& target) {
        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø–æ–ª—ñ—Ç–Ω–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–º
        std::cout << "üöÅ –†—É—Ö –¥–æ –ø–æ–∑–∏—Ü—ñ—ó (" << target.x() << ", " << target.y() << ", " << target.z() << ")" << std::endl;
    }

    void AutonomousDroneAgent::CheckForTargets() {
        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª–µ–π
        // –ü–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞
    }

    Velocity3D AutonomousDroneAgent::EstimateCurrentVelocity() {
        // –°–ø—Ä–æ—â–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        return Velocity3D(0, 0, 0);
    }

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ mesh-–º–µ—Ä–µ–∂–µ—é
    std::vector<DroneID> AutonomousDroneAgent::GetNearbyDrones() {
        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ mesh-–ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
        return std::vector<DroneID>();
    }

    void AutonomousDroneAgent::SendStatusToDrone(DroneID drone_id) {
        std::cout << "üì° –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å—É –¥—Ä–æ–Ω—É " << drone_id << std::endl;
    }

    DroneID AutonomousDroneAgent::FindBestLocalLeader(const std::vector<DroneID>& candidates) {
        // –ü–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
        return candidates.empty() ? 0 : candidates[0];
    }

    bool AutonomousDroneAgent::FollowLocalLeader(DroneID leader_id) {
        std::cout << "üë• –°–ª—ñ–¥—É–≤–∞–Ω–Ω—è –∑–∞ –ª—ñ–¥–µ—Ä–æ–º " << leader_id << std::endl;
        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ —Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
        return true;
    }

    void AutonomousDroneAgent::SimulateMovement(const Position3D& target, const Velocity3D& velocity) {
        // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø —Å–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è (–∫–æ–≥–¥–∞ –Ω–µ—Ç flight controller)
        static Position3D simulated_position = current_state_.position;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        Position3D direction = target - simulated_position;
        double distance = direction.magnitude();

        if (distance > 0.1) { // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            direction = direction.normalized();

            // –î–≤–∏–≥–∞–µ–º—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é velocity
            double dt = 0.05; // 50ms update
            Position3D movement = direction * velocity.magnitude() * dt;

            simulated_position = simulated_position + movement;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞
            if (navigator_) {
                navigator_->SetPosition(simulated_position.x(), simulated_position.y(), simulated_position.z());
            }

            std::cout << "üéÆ [SIM] –ü–æ–∑–∏—Ü–∏—è: (" << std::fixed << std::setprecision(2)
                      << simulated_position.x() << ", " << simulated_position.y()
                      << ", " << simulated_position.z() << ") –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ —Ü–µ–ª–∏: " << distance << "–º" << std::endl;
        }
    }

} // namespace SwarmSystem