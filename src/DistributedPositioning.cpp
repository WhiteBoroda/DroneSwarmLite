#include "../include/DistributedPositioning.h"
#include "../include/MeshProtocol.h"
#include <algorithm>
#include <cmath>
#include <iostream>

namespace DistributedPositioning {

    DistributedPositionTracker::DistributedPositionTracker(
            DroneID my_id,
            std::shared_ptr<MeshNetwork::SwarmMeshProtocol> mesh)
            : my_id_(my_id), mesh_protocol_(mesh) {

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —è–∫–æ—Ä—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        current_anchor_.type = AnchorType::NONE;
        current_anchor_.is_valid = false;

        std::cout << "üó∫Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –ø–æ–∑–∏—Ü—ñ–π –¥–ª—è –¥—Ä–æ–Ω–∞ " << my_id_ << std::endl;
    }

    bool DistributedPositionTracker::UpdateMyPosition(const Position3D& measured_position) {
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
        if (!ValidatePositionUpdate(my_id_, measured_position)) {
            std::cout << "‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–µ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó: ("
                      << measured_position.x << ", " << measured_position.y
                      << ", " << measured_position.z << ")" << std::endl;
            return false;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤–ª–∞—Å–Ω—É –ø–æ–∑–∏—Ü—ñ—é
        relative_positions_[my_id_] = measured_position;

        // –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        uint32_t current_time = GetCurrentTime();
        position_histories_[my_id_].AddPosition(measured_position, current_time);

        // –û–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
        drone_velocities_[my_id_] = EstimateVelocity(my_id_);

        // –†–æ–∑—Å–∏–ª–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ mesh
        BroadcastMyPosition();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —è–∫—ñ—Ä
        if (ShouldUpdateAnchor()) {
            UpdateAnchor();
        }

        std::cout << "üìç –ü–æ–∑–∏—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ: ("
                  << measured_position.x << ", " << measured_position.y
                  << ", " << measured_position.z << ")" << std::endl;

        return true;
    }

    bool DistributedPositionTracker::ProcessPositionUpdate(DroneID drone_id, const Position3D& position) {
        if (drone_id == my_id_) {
            return true; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–ª–∞—Å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        }

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!ValidatePositionUpdate(drone_id, position)) {
            std::cout << "‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –¥—Ä–æ–Ω–∞ " << drone_id << std::endl;
            return false;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é
        relative_positions_[drone_id] = position;

        // –î–æ–¥–∞—î–º–æ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        uint32_t current_time = GetCurrentTime();
        position_histories_[drone_id].AddPosition(position, current_time);

        // –û–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å
        drone_velocities_[drone_id] = EstimateVelocity(drone_id);

        std::cout << "üìç –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ—é –¥—Ä–æ–Ω–∞ " << drone_id << ": ("
                  << position.x << ", " << position.y << ", " << position.z << ")" << std::endl;

        return true;
    }

    bool DistributedPositionTracker::EstablishAnchor(AnchorType type) {
        AnchorPoint new_anchor;
        new_anchor.type = type;
        new_anchor.established_time = GetCurrentTime();
        new_anchor.last_update = new_anchor.established_time;

        switch (type) {
            case AnchorType::GEOMETRIC_CENTER:
                new_anchor.position = CalculateGeometricCenter();
                new_anchor.anchor_drone_id = 0; // –ù–µ–º–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞
                new_anchor.stability_score = CalculateGeometricCenterStability();
                break;

            case AnchorType::MOST_STABLE_DRONE:
            {
                DroneID stable_drone = FindMostStableDrone();
                if (stable_drone != 0) {
                    new_anchor.position = relative_positions_[stable_drone];
                    new_anchor.anchor_drone_id = stable_drone;
                    new_anchor.stability_score = CalculateStabilityScore(stable_drone);
                } else {
                    // Fallback –¥–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É
                    return EstablishAnchor(AnchorType::GEOMETRIC_CENTER);
                }
            }
                break;

            case AnchorType::CONSENSUS_ANCHOR:
                // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ—Ü–µ—Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É
                return ProposeNewAnchor(new_anchor);

            default:
                std::cout << "‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —è–∫–æ—Ä—è: " << static_cast<int>(type) << std::endl;
                return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —è–∫–æ—Ä—è
        if (new_anchor.stability_score > 0.5) {
            current_anchor_ = new_anchor;
            current_anchor_.is_valid = true;

            std::cout << "‚öì –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π —è–∫—ñ—Ä —Ç–∏–ø—É " << static_cast<int>(type)
                      << " –∑ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—é " << new_anchor.stability_score << std::endl;

            // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥–Ω–æ—Å–Ω–æ –Ω–æ–≤–æ–≥–æ —è–∫–æ—Ä—è
            RecalculateRelativePositions();

            return true;
        } else {
            std::cout << "‚ùå –Ø–∫—ñ—Ä –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π: " << new_anchor.stability_score << std::endl;
            return false;
        }
    }

    bool DistributedPositionTracker::UpdateAnchor() {
        if (!current_anchor_.is_valid) {
            return EstablishAnchor(AnchorType::GEOMETRIC_CENTER);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —è–∫—ñ—Ä
        if (!ValidateCurrentAnchor()) {
            std::cout << "‚ö†Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π —è–∫—ñ—Ä —Å—Ç–∞–≤ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π" << std::endl;

            // –°–ø—Ä–æ–±—É—î–º–æ —Ç–æ–π –∂–µ —Ç–∏–ø —è–∫–æ—Ä—è
            return EstablishAnchor(current_anchor_.type);
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —è–∫—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
        switch (current_anchor_.type) {
            case AnchorType::GEOMETRIC_CENTER:
                current_anchor_.position = CalculateGeometricCenter();
                current_anchor_.stability_score = CalculateGeometricCenterStability();
                break;

            case AnchorType::MOST_STABLE_DRONE:
                if (current_anchor_.anchor_drone_id != 0) {
                    auto pos_it = relative_positions_.find(current_anchor_.anchor_drone_id);
                    if (pos_it != relative_positions_.end()) {
                        current_anchor_.position = pos_it->second;
                        current_anchor_.stability_score = CalculateStabilityScore(current_anchor_.anchor_drone_id);
                    } else {
                        // –î—Ä–æ–Ω-—è–∫—ñ—Ä –≤—Ç—Ä–∞—á–µ–Ω–∏–π
                        return EstablishAnchor(AnchorType::MOST_STABLE_DRONE);
                    }
                }
                break;

            default:
                break;
        }

        current_anchor_.last_update = GetCurrentTime();

        std::cout << "‚öì –Ø–∫—ñ—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ, —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å: " << current_anchor_.stability_score << std::endl;
        return true;
    }

    bool DistributedPositionTracker::ValidateCurrentAnchor() {
        if (!current_anchor_.is_valid) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞ —á–∞—Å–æ–º - —è–∫—ñ—Ä –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∏–º
        uint32_t current_time = GetCurrentTime();
        if (current_time - current_anchor_.last_update > 30000) { // 30 —Å–µ–∫—É–Ω–¥
            std::cout << "‚ö†Ô∏è –Ø–∫—ñ—Ä –∑–∞—Å—Ç–∞—Ä—ñ–≤ (" << (current_time - current_anchor_.last_update) << "–º—Å)" << std::endl;
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        if (current_anchor_.stability_score < 0.3) {
            std::cout << "‚ö†Ô∏è –Ø–∫—ñ—Ä –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π: " << current_anchor_.stability_score << std::endl;
            return false;
        }

        // –î–ª—è —è–∫–æ—Ä—è-–¥—Ä–æ–Ω–∞ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥—Ä–æ–Ω —â–µ —ñ—Å–Ω—É—î
        if (current_anchor_.type == AnchorType::MOST_STABLE_DRONE) {
            if (current_anchor_.anchor_drone_id != 0) {
                auto pos_it = relative_positions_.find(current_anchor_.anchor_drone_id);
                if (pos_it == relative_positions_.end()) {
                    std::cout << "‚ö†Ô∏è –î—Ä–æ–Ω-—è–∫—ñ—Ä " << current_anchor_.anchor_drone_id << " –≤—Ç—Ä–∞—á–µ–Ω–∏–π" << std::endl;
                    return false;
                }
            }
        }

        return true;
    }

    Position3D DistributedPositionTracker::GetMyRelativePosition() const {
        auto it = relative_positions_.find(my_id_);
        if (it != relative_positions_.end() && current_anchor_.is_valid) {
            return it->second - current_anchor_.position;
        }
        return Position3D(0, 0, 0);
    }

    Position3D DistributedPositionTracker::GetDroneRelativePosition(DroneID drone_id) const {
        auto it = relative_positions_.find(drone_id);
        if (it != relative_positions_.end() && current_anchor_.is_valid) {
            return it->second - current_anchor_.position;
        }
        return Position3D(0, 0, 0);
    }

    Position3D DistributedPositionTracker::GetSwarmCenter() const {
        return CalculateGeometricCenter();
    }

    bool DistributedPositionTracker::SynchronizeWithMesh() {
        if (!mesh_protocol_) {
            return false;
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó –≤—Å—ñ—Ö –¥—Ä–æ–Ω—ñ–≤ —á–µ—Ä–µ–∑ mesh
        auto mesh_positions = mesh_protocol_->GetSwarmPositions();

        for (const auto& [drone_id, position] : mesh_positions) {
            if (drone_id != my_id_) {
                ProcessPositionUpdate(drone_id, position);
            }
        }

        std::cout << "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ—ó " << mesh_positions.size() << " –¥—Ä–æ–Ω—ñ–≤ —á–µ—Ä–µ–∑ mesh" << std::endl;
        return true;
    }

    bool DistributedPositionTracker::BroadcastMyPosition() {
        if (!mesh_protocol_) {
            return false;
        }

        auto my_pos_it = relative_positions_.find(my_id_);
        if (my_pos_it != relative_positions_.end()) {
            return mesh_protocol_->UpdatePositionInSwarm(my_pos_it->second);
        }

        return false;
    }

    DroneID DistributedPositionTracker::FindMostStableDrone() {
        DroneID most_stable = 0;
        double best_stability = -1.0;

        for (const auto& [drone_id, position] : relative_positions_) {
            double stability = CalculateStabilityScore(drone_id);
            if (stability > best_stability) {
                best_stability = stability;
                most_stable = drone_id;
            }
        }

        std::cout << "üéØ –ù–∞–π—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∏–π –¥—Ä–æ–Ω: " << most_stable
                  << " (—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å: " << best_stability << ")" << std::endl;

        return most_stable;
    }

    Position3D DistributedPositionTracker::CalculateGeometricCenter() {
        if (relative_positions_.empty()) {
            return Position3D(0, 0, 0);
        }

        Position3D center(0, 0, 0);
        for (const auto& [drone_id, position] : relative_positions_) {
            center.x += position.x;
            center.y += position.y;
            center.z += position.z;
        }

        size_t count = relative_positions_.size();
        center.x /= count;
        center.y /= count;
        center.z /= count;

        return center;
    }

    double DistributedPositionTracker::CalculateGeometricCenterStability() {
        if (relative_positions_.size() < 3) {
            return 0.1; // –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥—Ä–æ–Ω—ñ–≤ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É
        }

        // –û–±—á–∏—Å–ª—é—î–º–æ –¥–∏—Å–ø–µ—Ä—Å—ñ—é –ø–æ–∑–∏—Ü—ñ–π –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü–µ–Ω—Ç—Ä—É
        Position3D center = CalculateGeometricCenter();
        double variance = 0.0;

        for (const auto& [drone_id, position] : relative_positions_) {
            double dist_sq = pow(position.x - center.x, 2) +
                             pow(position.y - center.y, 2) +
                             pow(position.z - center.z, 2);
            variance += dist_sq;
        }

        variance /= relative_positions_.size();

        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Å–ø–µ—Ä—Å—ñ—é –≤ –æ—Ü—ñ–Ω–∫—É —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ (0-1)
        double stability = 1.0 / (1.0 + variance / 100.0); // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è

        return std::min(1.0, std::max(0.0, stability));
    }

    double DistributedPositionTracker::CalculateStabilityScore(DroneID drone_id) {
        auto history_it = position_histories_.find(drone_id);
        if (history_it == position_histories_.end()) {
            return 0.0;
        }

        return history_it->second.GetStabilityScore();
    }

    Velocity3D DistributedPositionTracker::EstimateVelocity(DroneID drone_id) {
        auto history_it = position_histories_.find(drone_id);
        if (history_it == position_histories_.end() ||
            history_it->second.positions.size() < 2) {
            return Velocity3D(0, 0, 0);
        }

        const auto& positions = history_it->second.positions;
        const auto& timestamps = history_it->second.timestamps;

        // –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó
        size_t size = positions.size();
        const Position3D& pos1 = positions[size - 2];
        const Position3D& pos2 = positions[size - 1];
        uint32_t time1 = timestamps[size - 2];
        uint32_t time2 = timestamps[size - 1];

        double dt = (time2 - time1) / 1000.0; // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ —Å–µ–∫—É–Ω–¥–∏
        if (dt <= 0.0) {
            return Velocity3D(0, 0, 0);
        }

        Velocity3D velocity;
        velocity.x = (pos2.x - pos1.x) / dt;
        velocity.y = (pos2.y - pos1.y) / dt;
        velocity.z = (pos2.z - pos1.z) / dt;

        return velocity;
    }

    bool DistributedPositionTracker::ValidatePositionUpdate(DroneID drone_id, const Position3D& position) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ä–æ–∑—É–º–Ω—ñ –º–µ–∂—ñ
        const double MAX_COORDINATE = 10000.0; // 10 –∫–º
        if (abs(position.x) > MAX_COORDINATE ||
            abs(position.y) > MAX_COORDINATE ||
            abs(position.z) > MAX_COORDINATE) {
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ä—ñ–∑–∫—ñ —Å—Ç—Ä–∏–±–∫–∏ –ø–æ–∑–∏—Ü—ñ—ó
        auto prev_pos_it = relative_positions_.find(drone_id);
        if (prev_pos_it != relative_positions_.end()) {
            const Position3D& prev_pos = prev_pos_it->second;
            double distance = sqrt(pow(position.x - prev_pos.x, 2) +
                                   pow(position.y - prev_pos.y, 2) +
                                   pow(position.z - prev_pos.z, 2));

            const double MAX_POSITION_JUMP = 100.0; // 100 –º–µ—Ç—Ä—ñ–≤ –º–∞–∫—Å–∏–º—É–º
            if (distance > MAX_POSITION_JUMP) {
                std::cout << "‚ö†Ô∏è –ó–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π —Å—Ç—Ä–∏–±–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó –¥—Ä–æ–Ω–∞ " << drone_id
                          << ": " << distance << "–º" << std::endl;
                return false;
            }
        }

        return true;
    }

    void DistributedPositionTracker::RecalculateRelativePositions() {
        if (!current_anchor_.is_valid) {
            return;
        }

        std::cout << "üîÑ –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ–π –≤—ñ–¥–Ω–æ—Å–Ω–æ –Ω–æ–≤–æ–≥–æ —è–∫–æ—Ä—è" << std::endl;

        // –í—Å—ñ –ø–æ–∑–∏—Ü—ñ—ó –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —è–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ñ
        // –í—ñ–¥–Ω–æ—Å–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –æ–±—á–∏—Å–ª—é—é—Ç—å—Å—è –≤ GetDroneRelativePosition()
        // –¢—É—Ç –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è

        for (const auto& [drone_id, position] : relative_positions_) {
            Position3D relative = position - current_anchor_.position;
            std::cout << "  –î—Ä–æ–Ω " << drone_id << ": ("
                      << relative.x << ", " << relative.y << ", " << relative.z << ")" << std::endl;
        }
    }

    bool DistributedPositionTracker::ProposeNewAnchor(const AnchorPoint& proposed_anchor) {
        // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ ConsensusPositioning
        // –ü–æ–∫–∏ —â–æ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
        std::cout << "üó≥Ô∏è –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –Ω–æ–≤–æ–≥–æ —è–∫–æ—Ä—è —Ç–∏–ø—É " << static_cast<int>(proposed_anchor.type) << std::endl;

        // –°–∏–º—É–ª—è—Ü—ñ—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É - –ø—Ä–∏–π–º–∞—î–º–æ —è–∫—â–æ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å > 0.7
        if (proposed_anchor.stability_score > 0.7) {
            current_anchor_ = proposed_anchor;
            current_anchor_.is_valid = true;
            RecalculateRelativePositions();
            return true;
        }

        return false;
    }

    bool DistributedPositionTracker::ShouldUpdateAnchor() {
        if (!current_anchor_.is_valid) {
            return true;
        }

        uint32_t current_time = GetCurrentTime();

        // –û–Ω–æ–≤–ª—é—î–º–æ —è–∫—ñ—Ä –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä—É
        if (current_anchor_.type == AnchorType::GEOMETRIC_CENTER) {
            return (current_time - current_anchor_.last_update) > 5000;
        }

        // –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ - –º–µ–Ω—à–µ —á–∞—Å—Ç–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
        return (current_time - current_anchor_.last_update) > 10000;
    }

    uint32_t DistributedPositionTracker::GetCurrentTime() {
        return std::chrono::duration_cast<std::chrono::milliseconds>(
                std::chrono::system_clock::now().time_since_epoch()).count();
    }

    double DistributedPositionTracker::GetPositioningAccuracy() const {
        if (!current_anchor_.is_valid) {
            return 0.0;
        }

        return current_anchor_.position_accuracy > 0 ?
               current_anchor_.position_accuracy : 1.0; // 1 –º–µ—Ç—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }

    bool DistributedPositionTracker::IsPositioningReliable() const {
        return current_anchor_.is_valid &&
               current_anchor_.stability_score > 0.5 &&
               relative_positions_.size() >= 2;
    }

} // namespace DistributedPositioning//
// Created by yv on 22.09.2025.
//
